{
  "version": 3,
  "sources": ["../../node_modules/@fluentui/foundation-legacy/lib/createComponent.tsx", "../../node_modules/@fluentui/foundation-legacy/lib/slots.tsx", "../../node_modules/@fluentui/foundation-legacy/lib/utilities.ts", "../../node_modules/@fluentui/foundation-legacy/lib/ThemeProvider.tsx", "../../node_modules/@fluentui/foundation-legacy/lib/hooks/hooks/controlled.ts", "../../node_modules/@fluentui/foundation-legacy/lib/version.ts", "../../node_modules/@fluentui/react/lib/components/Stack/StackItem/components/Stack/StackItem/StackItem.styles.ts", "../../node_modules/@fluentui/react/lib/components/Stack/StackItem/components/Stack/StackItem/StackItem.tsx", "../../node_modules/@fluentui/react/lib/components/Stack/components/Stack/Stack.tsx", "../../node_modules/@fluentui/react/lib/components/Stack/components/Stack/StackUtils.ts", "../../node_modules/@fluentui/react/lib/components/Stack/components/Stack/Stack.styles.ts"],
  "sourcesContent": ["import * as React from 'react';\nimport { concatStyleSets, IStyleSet, ITheme } from '@fluentui/style-utilities';\nimport { Customizations, CustomizerContext, ICustomizerContext } from '@fluentui/utilities';\nimport { createFactory } from './slots';\nimport { assign } from './utilities';\n\nimport {\n  IComponentOptions,\n  ICustomizationProps,\n  IStyleableComponentProps,\n  IStylesFunctionOrObject,\n  IToken,\n  ITokenFunction,\n  IViewComponent,\n} from './IComponent';\nimport { IDefaultSlotProps, ISlotCreator, ValidProps } from './ISlots';\n\n/**\n * Assembles a higher order component based on the following: styles, theme, view, and state.\n * Imposes a separation of concern and centralizes styling processing to increase ease of use and robustness\n * in how components use and apply styling and theming.\n *\n * Automatically merges and applies themes and styles with theme / styleprops having the highest priority.\n * State component, if provided, is passed in props for processing. Props from state / user are automatically processed\n * and styled before finally being passed to view.\n *\n * State components should contain all stateful behavior and should not generate any JSX, but rather simply call\n * the view prop.\n *\n * Views should simply be stateless pure functions that receive all props needed for rendering their output.\n *\n * State component is optional. If state is not provided, created component is essentially a functional\n * stateless component.\n *\n * @param options - component Component options. See IComponentOptions for more detail.\n */\nexport function createComponent<\n  TComponentProps extends ValidProps,\n  TTokens,\n  TStyleSet extends IStyleSet<TStyleSet>,\n  TViewProps extends TComponentProps = TComponentProps,\n  TStatics = {},\n>(\n  view: IViewComponent<TViewProps>,\n  options: IComponentOptions<TComponentProps, TTokens, TStyleSet, TViewProps, TStatics> = {},\n): React.FunctionComponent<TComponentProps> & TStatics {\n  const { factoryOptions = {} } = options;\n  const { defaultProp } = factoryOptions;\n\n  const ResultComponent: React.FunctionComponent<TComponentProps> = (\n    componentProps: TComponentProps & IStyleableComponentProps<TViewProps, TTokens, TStyleSet>,\n  ) => {\n    const settings: ICustomizationProps<TViewProps, TTokens, TStyleSet> = _getCustomizations(\n      options.displayName,\n      React.useContext(CustomizerContext),\n      options.fields,\n    );\n\n    const stateReducer = options.state;\n\n    if (stateReducer) {\n      // Don't assume state will return all props, so spread useState result over component props.\n      componentProps = {\n        ...componentProps,\n        ...stateReducer(componentProps),\n      };\n    }\n\n    const theme = componentProps.theme || settings.theme;\n\n    const tokens = _resolveTokens(componentProps, theme, options.tokens, settings.tokens, componentProps.tokens);\n    const styles = _resolveStyles(\n      componentProps,\n      theme,\n      tokens,\n      options.styles,\n      settings.styles,\n      componentProps.styles,\n    );\n\n    const viewProps = {\n      ...componentProps,\n      styles,\n      tokens,\n      _defaultStyles: styles,\n      theme,\n    } as unknown as TViewProps & IDefaultSlotProps<any>;\n\n    return view(viewProps);\n  };\n\n  ResultComponent.displayName = options.displayName || view.name;\n\n  // If a shorthand prop is defined, create a factory for the component.\n  // TODO: This shouldn't be a concern of createComponent.. factoryOptions should just be forwarded.\n  //       Need to weigh creating default factories on component creation vs. memoizing them on use in slots.tsx.\n  if (defaultProp) {\n    (ResultComponent as ISlotCreator<TComponentProps, any>).create = createFactory(ResultComponent, { defaultProp });\n  }\n\n  assign(ResultComponent, options.statics);\n\n  // Later versions of TypeSript should allow us to merge objects in a type safe way and avoid this cast.\n  return ResultComponent as React.FunctionComponent<TComponentProps> & TStatics;\n}\n\n/**\n * Resolve all styles functions with both props and tokens and flatten results along with all styles objects.\n */\nfunction _resolveStyles<TProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>>(\n  props: TProps,\n  theme: ITheme,\n  tokens: TTokens,\n  ...allStyles: (IStylesFunctionOrObject<TProps, TTokens, TStyleSet> | undefined)[]\n): ReturnType<typeof concatStyleSets> {\n  return concatStyleSets(\n    ...allStyles.map((styles: IStylesFunctionOrObject<TProps, TTokens, TStyleSet> | undefined) =>\n      typeof styles === 'function' ? styles(props, theme, tokens) : styles,\n    ),\n  );\n}\n\n/**\n * Resolve all tokens functions with props flatten results along with all tokens objects.\n */\nfunction _resolveTokens<TViewProps, TTokens>(\n  props: TViewProps,\n  theme: ITheme,\n  ...allTokens: (IToken<TViewProps, TTokens> | false | null | undefined)[]\n): TTokens {\n  const tokens = {};\n\n  for (let currentTokens of allTokens) {\n    if (currentTokens) {\n      // TODO: why is this cast needed? TS seems to think there is a (TToken | Function) union from somewhere.\n      currentTokens =\n        typeof currentTokens === 'function'\n          ? (currentTokens as ITokenFunction<TViewProps, TTokens>)(props, theme)\n          : currentTokens;\n\n      if (Array.isArray(currentTokens)) {\n        currentTokens = _resolveTokens(props, theme, ...currentTokens);\n      }\n\n      assign(tokens, currentTokens);\n    }\n  }\n\n  return tokens as TTokens;\n}\n\n/**\n * Helper function for calling Customizations.getSettings falling back to default fields.\n *\n * @param displayName Displayable name for component.\n * @param context React context passed to component containing contextual settings.\n * @param fields Optional list of properties to grab from global store and context.\n */\nfunction _getCustomizations<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>>(\n  displayName: string | undefined,\n  context: ICustomizerContext,\n  fields?: string[],\n): ICustomizationProps<TViewProps, TTokens, TStyleSet> {\n  // TODO: do we want field props? should fields be part of IComponent and used here?\n  // TODO: should we centrally define DefaultFields? (not exported from styling)\n  // TODO: tie this array to ICustomizationProps, such that each array element is keyof ICustomizationProps\n  const DefaultFields = ['theme', 'styles', 'tokens'];\n  return Customizations.getSettings(fields || DefaultFields, displayName, context.customizations);\n}\n", "import * as React from 'react';\nimport { mergeCss } from '@fluentui/merge-styles';\nimport { IStyle, ITheme } from '@fluentui/style-utilities';\nimport { getRTL, memoizeFunction } from '@fluentui/utilities';\nimport { assign } from './utilities';\nimport { IFactoryOptions } from './IComponent';\nimport {\n  ISlottableReactType,\n  ISlot,\n  ISlots,\n  ISlotDefinition,\n  ISlotFactory,\n  ISlotProp,\n  ISlottableProps,\n  ISlotOptions,\n  IDefaultSlotProps,\n  IProcessedSlotProps,\n  ValidProps,\n  ValidShorthand,\n} from './ISlots';\n\n/**\n * This function is required for any module that uses slots.\n *\n * This function is a slot resolver that automatically evaluates slot functions to generate React elements.\n * A byproduct of this resolver is that it removes slots from the React hierarchy by bypassing React.createElement.\n *\n * To use this function on a per-file basis, use the jsx directive targeting withSlots.\n * This directive must be the FIRST LINE in the file to work correctly.\n * Usage of this pragma also requires withSlots import statement.\n *\n * See React.createElement\n */\n// Can't use typeof on React.createElement since it's overloaded. Approximate createElement's signature for now\n// and widen as needed.\nexport function withSlots<P>(\n  type: ISlot<P> | React.FunctionComponent<P> | string,\n  props?: (React.Attributes & P) | null,\n  ...children: React.ReactNode[]\n): ReturnType<React.FunctionComponent<P>> {\n  const slotType = type as ISlot<P>;\n  if (slotType.isSlot) {\n    // Since we are bypassing createElement, use React.Children.toArray to make sure children are\n    // properly assigned keys.\n    // TODO: should this be mutating? does React mutate children subprop with createElement?\n    // TODO: will toArray clobber existing keys?\n    // TODO: React generates warnings because it doesn't detect hidden member _store that is set in createElement.\n    //        Even children passed to createElement without keys don't generate this warning.\n    //        Is there a better way to prevent slots from appearing in hierarchy? toArray doesn't address root issue.\n    children = React.Children.toArray(children);\n\n    // TODO: There is something weird going on here with children embedded in props vs. rest args.\n    // Comment out these lines to see. Make sure this function is doing the right things.\n    if (children.length === 0) {\n      return slotType(props);\n    }\n\n    return slotType({ ...(props as any), children });\n  } else {\n    // TODO: Are there some cases where children should NOT be spread? Also, spreading reraises perf question.\n    //        Children had to be spread to avoid breaking KeytipData in Toggle.view:\n    //        react-dom.development.js:18931 Uncaught TypeError: children is not a function\n    //        Without spread, function child is a child array of one element\n    // TODO: is there a reason this can't be:\n    // return React.createElement.apply(this, arguments);\n    return React.createElement(type, props, ...children);\n  }\n}\n\n/**\n * This function creates factories that render ouput depending on the user ISlotProp props passed in.\n * @param DefaultComponent - Base component to render when not overridden by user props.\n * @param options - Factory options, including defaultProp value for shorthand prop mapping.\n * @returns ISlotFactory function used for rendering slots.\n */\nexport function createFactory<TProps extends ValidProps, TShorthandProp extends ValidShorthand = never>(\n  DefaultComponent: React.ComponentType<TProps>,\n  options: IFactoryOptions<TProps> = {},\n): ISlotFactory<TProps, TShorthandProp> {\n  const { defaultProp = 'children' } = options;\n\n  const result: ISlotFactory<TProps, TShorthandProp> = (\n    componentProps,\n    userProps,\n    userSlotOptions,\n    defaultStyles,\n    theme,\n  ) => {\n    // If they passed in raw JSX, just return that.\n    if (React.isValidElement(userProps)) {\n      return userProps;\n    }\n\n    const flattenedUserProps: TProps | undefined = _translateShorthand(defaultProp as string, userProps);\n    const finalProps = _constructFinalProps(defaultStyles, theme, componentProps, flattenedUserProps);\n\n    if (userSlotOptions) {\n      if (userSlotOptions.component) {\n        // TODO: Remove cast if possible. This cast is needed because TS errors on the intrinsic portion of ReactType.\n        // return <userSlotOptions.component {...finalProps} />;\n        const UserComponent = userSlotOptions.component as React.ComponentType<TProps>;\n        return <UserComponent {...finalProps} />;\n      }\n\n      if (userSlotOptions.render) {\n        return userSlotOptions.render(finalProps, DefaultComponent);\n      }\n    }\n\n    return <DefaultComponent {...finalProps} />;\n  };\n\n  return result;\n}\n\n/**\n * Default factory for components without explicit factories.\n */\nconst defaultFactory = memoizeFunction(type => createFactory(type));\n\n/**\n * This function generates slots that can be used in JSX given a definition of slots and their corresponding types.\n * @param userProps - Props as pass to component.\n * @param slots - Slot definition object defining the default slot component for each slot.\n * @returns A set of created slots that components can render in JSX.\n */\nexport function getSlots<TComponentProps extends ISlottableProps<TComponentSlots>, TComponentSlots>(\n  userProps: TComponentProps,\n  slots: ISlotDefinition<Required<TComponentSlots>>,\n): ISlots<Required<TComponentSlots>> {\n  const result: ISlots<Required<TComponentSlots>> = {} as ISlots<Required<TComponentSlots>>;\n\n  // userProps already has default props mixed in by createComponent. Recast here to gain typing for this function.\n  const mixedProps = userProps as TComponentProps & IDefaultSlotProps<TComponentSlots>;\n\n  for (const name in slots) {\n    if (slots.hasOwnProperty(name)) {\n      // This closure method requires the use of withSlots to prevent unnecessary rerenders. This is because React\n      // detects each closure as a different component (since it is a new instance) from the previous one and then\n      // forces a rerender of the entire slot subtree. For now, the only way to avoid this is to use withSlots, which\n      // bypasses the call to React.createElement.\n      const slot: ISlots<Required<TComponentSlots>>[keyof TComponentSlots] = (componentProps, ...args: any[]) => {\n        if (args.length > 0) {\n          // If React.createElement is being incorrectly used with slots, there will be additional arguments.\n          // We can detect these additional arguments and error on their presence.\n          throw new Error('Any module using getSlots must use withSlots. Please see withSlots javadoc for more info.');\n        }\n        // TODO: having TS infer types here seems to cause infinite loop.\n        //   use explicit types or casting to preserve typing if possible.\n        // TODO: this should be a lookup on TProps property instead of being TProps directly, which is probably\n        //   causing the infinite loop\n        return _renderSlot<any, any, any>(\n          slots[name],\n          // TODO: this cast to any is hiding a relationship issue between the first two args\n          componentProps as any,\n          mixedProps[name],\n          mixedProps.slots && mixedProps.slots[name],\n          // _defaultStyles should always be present, but a check for existence is added to make view tests\n          // easier to use.\n          mixedProps._defaultStyles && mixedProps._defaultStyles[name],\n          (mixedProps as any).theme,\n        );\n      };\n      slot.isSlot = true;\n      result[name] = slot;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Helper function that translates shorthand as needed.\n * @param defaultProp\n * @param slotProps\n */\nfunction _translateShorthand<TProps extends ValidProps, TShorthandProp extends ValidShorthand>(\n  defaultProp: string,\n  slotProps: ISlotProp<TProps, TShorthandProp>,\n): TProps | undefined {\n  let transformedProps: TProps | undefined;\n\n  if (typeof slotProps === 'string' || typeof slotProps === 'number' || typeof slotProps === 'boolean') {\n    transformedProps = {\n      [defaultProp]: slotProps as any,\n    } as TProps;\n  } else {\n    transformedProps = slotProps as TProps;\n  }\n\n  return transformedProps;\n}\n\n/**\n * Helper function that constructs final styles and props given a series of props ordered by increasing priority.\n */\nfunction _constructFinalProps<TProps extends IProcessedSlotProps>(\n  defaultStyles: IStyle,\n  theme?: ITheme,\n  ...allProps: (TProps | undefined)[]\n): TProps {\n  const finalProps: TProps = {} as any;\n  const classNames: (string | undefined)[] = [];\n\n  for (const props of allProps) {\n    classNames.push(props && props.className);\n    assign(finalProps, props);\n  }\n\n  finalProps.className = mergeCss([defaultStyles, classNames], { rtl: getRTL(theme) });\n\n  return finalProps;\n}\n\n/**\n * Render a slot given component and user props. Uses component factory if available, otherwise falls back\n * to default factory.\n * @param ComponentType Factory component type.\n * @param componentProps The properties passed into slot from within the component.\n * @param userProps The user properties passed in from outside of the component.\n */\nfunction _renderSlot<\n  TSlotComponent extends ISlottableReactType<TSlotProps, TSlotShorthand>,\n  TSlotProps extends ValidProps,\n  TSlotShorthand extends ValidShorthand,\n>(\n  ComponentType: TSlotComponent,\n  componentProps: TSlotProps,\n  userProps: ISlotProp<TSlotProps, TSlotShorthand>,\n  slotOptions: ISlotOptions<TSlotProps> | undefined,\n  defaultStyles: IStyle,\n  theme?: ITheme,\n): ReturnType<React.FunctionComponent> {\n  if (ComponentType.create !== undefined) {\n    return ComponentType.create(componentProps, userProps, slotOptions, defaultStyles);\n  } else {\n    // TODO: need to resolve typing / generic issues passing through memoizeFunction. for now, cast to 'unknown'\n    return (defaultFactory(ComponentType) as unknown as ISlotFactory<TSlotProps, TSlotShorthand>)(\n      componentProps,\n      userProps,\n      slotOptions,\n      defaultStyles,\n      theme,\n    );\n  }\n}\n", "import { __assign } from 'tslib';\nexport const assign = __assign;\n", "import * as React from 'react';\nimport { getThemedContext, ISchemeNames, ITheme } from '@fluentui/style-utilities';\nimport { Customizer, ICustomizerProps } from '@fluentui/utilities';\n\nexport interface IThemeProviderProps {\n  scheme?: ISchemeNames;\n  theme?: ITheme;\n}\n\n/**\n * Theme provider is a simplified version of Customizer that activates the appropriate theme data\n * for a given scheme name.\n *\n * @param providers - Injected providers for accessing theme data and providing it via a Customizer component.\n * @deprecated This is an old ThemeProvider implementation. New code should use the ThemeProvider exported from\n * `@fluentui/react` (or `@fluentui/react/lib/Theme`) instead.\n */\nexport const ThemeProvider: React.FunctionComponent<IThemeProviderProps> = (props: IThemeProviderProps) => {\n  const { scheme, theme, ...rest } = props;\n\n  // TODO: consider merging implementation with theme-proto, which only stores a reference / scheme name to theme\n  //   in context and uses quick global store accessor to trigger change by passing in theme object as child and\n  //   triggering re-render. (perf benefits need verification)\n  const contextTransform: ICustomizerProps['contextTransform'] = context => {\n    return getThemedContext(context, scheme, theme);\n  };\n\n  // eslint-disable-next-line react/jsx-no-bind, deprecation/deprecation\n  return <Customizer {...rest} contextTransform={contextTransform} />;\n};\n", "import * as React from 'react';\n\nexport interface IControlledStateOptions<TProps, TProp extends keyof TProps, TDefaultProp extends keyof TProps> {\n  defaultPropValue?: TProps[TProp];\n  defaultPropName?: TDefaultProp;\n}\n\n/**\n * Controlled state helper that gives priority to props value. Useful for components that have props with both\n * controlled and uncontrolled modes. Any props values will override state, but will not update internal state.\n * If prop is defined and then later undefined, state will revert to its previous value.\n *\n * @param props - The props object containing controlled prop values.\n * @param propName - The controlled prop name.\n * @param options - Options. defaultPropValue is only used if defaultPropName (or its value) is undefined.\n */\nexport function useControlledState<TProps, TProp extends keyof TProps, TDefaultProp extends keyof TProps>(\n  props: Readonly<TProps>,\n  propName: TProp,\n  options?: IControlledStateOptions<TProps, TProp, TDefaultProp>,\n): [TProps[TProp] | undefined, React.Dispatch<React.SetStateAction<TProps[TProp]>>] {\n  let defaultValue: TProps[TProp] | undefined;\n  if (options) {\n    if (options.defaultPropName && props[options.defaultPropName] !== undefined) {\n      // No easy way to coerce TProps[TDefaultProp] to match TProps[TProp] in generic typings, so cast it here.\n      defaultValue = props[options.defaultPropName] as unknown as TProps[TProp];\n    } else {\n      defaultValue = options && options.defaultPropValue;\n    }\n  }\n\n  const [state, setState] = React.useState(defaultValue);\n\n  if (props[propName] !== undefined) {\n    return [props[propName], setState];\n  } else {\n    return [state, setState];\n  }\n}\n\n/**\n * Simple controlled helper that gives priority to props value and falls back to derived value.\n *\n * @param props - The props object containing controlled prop values.\n * @param propName - The controlled prop name.\n * @param derivedValue - Derived value. Returned when controlled value is not present.\n */\nexport function getControlledDerivedProps<TProps, TProp extends keyof TProps>(\n  props: Readonly<TProps>,\n  propName: TProp,\n  derivedValue: TProps[TProp],\n): TProps[TProp] {\n  if (props[propName] !== undefined) {\n    return props[propName];\n  } else {\n    return derivedValue;\n  }\n}\n", "// Do not modify this file; it is generated as part of publish.\n// The checked in version is a placeholder only and will not be updated.\nimport { setVersion } from '@fluentui/set-version';\nsetVersion('@fluentui/foundation-legacy', '8.2.43');", "import { getGlobalClassNames } from '../../../Styling';\nimport type { IStackItemComponent, IStackItemStyles, IStackItemStylesReturnType } from './StackItem.types';\n\nexport const GlobalClassNames = {\n  root: 'ms-StackItem',\n};\n\nconst alignMap: { [key: string]: string } = {\n  start: 'flex-start',\n  end: 'flex-end',\n};\n\nexport const StackItemStyles: IStackItemComponent['styles'] = (props, theme, tokens): IStackItemStylesReturnType => {\n  const { grow, shrink, disableShrink, align, verticalFill, order, className, basis = 'auto' } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      theme.fonts.medium,\n      classNames.root,\n      {\n        flexBasis: basis,\n        margin: tokens.margin,\n        padding: tokens.padding,\n        height: verticalFill ? '100%' : 'auto',\n        width: 'auto',\n      },\n      grow && {\n        flexGrow: grow === true ? 1 : grow,\n      },\n      (disableShrink || (!grow && !shrink)) && {\n        flexShrink: 0,\n      },\n      shrink &&\n        !disableShrink && {\n          flexShrink: 1,\n        },\n      align && {\n        alignSelf: alignMap[align] || align,\n      },\n      order && {\n        order,\n      },\n      className,\n    ],\n    // TODO: this cast may be hiding some potential issues with styling and name\n    //        lookups and should be removed\n  } as IStackItemStyles;\n};\n", "/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '@fluentui/foundation-legacy';\nimport { getNativeProps, htmlElementProperties } from '../../../Utilities';\nimport { StackItemStyles as styles } from './StackItem.styles';\nimport type { IStackItemComponent, IStackItemProps, IStackItemSlots } from './StackItem.types';\n\nconst StackItemView: IStackItemComponent['view'] = props => {\n  const { children } = props;\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, htmlElementProperties);\n  // eslint-disable-next-line eqeqeq\n  if (children == null) {\n    return null;\n  }\n\n  const Slots = getSlots<IStackItemProps, IStackItemSlots>(props, {\n    root: 'div',\n  });\n\n  return <Slots.root {...nativeProps}>{children}</Slots.root>;\n};\n\nexport const StackItem: React.FunctionComponent<IStackItemProps> = createComponent(StackItemView, {\n  displayName: 'StackItem',\n  styles,\n});\n\nexport default StackItem;\n", "/** @jsxRuntime classic */\n/** @jsx withSlots */\nimport * as React from 'react';\nimport { withSlots, createComponent, getSlots } from '@fluentui/foundation-legacy';\nimport { css, getNativeProps, htmlElementProperties, warnDeprecations } from '../../Utilities';\nimport { styles, GlobalClassNames as StackGlobalClassNames } from './Stack.styles';\nimport { StackItem } from './StackItem/StackItem';\nimport type { IStackComponent, IStackProps, IStackSlots } from './Stack.types';\nimport type { IStackItemProps } from './StackItem/StackItem.types';\n\nconst StackView: IStackComponent['view'] = props => {\n  const { as: RootType = 'div', disableShrink = false, enableScopedSelectors = false, wrap, ...rest } = props;\n\n  warnDeprecations('Stack', props, {\n    gap: 'tokens.childrenGap',\n    maxHeight: 'tokens.maxHeight',\n    maxWidth: 'tokens.maxWidth',\n    padding: 'tokens.padding',\n  });\n\n  const stackChildren = _processStackChildren(props.children, { disableShrink, enableScopedSelectors });\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(rest, htmlElementProperties);\n\n  const Slots = getSlots<IStackProps, IStackSlots>(props, {\n    root: RootType,\n    inner: 'div',\n  });\n\n  if (wrap) {\n    return (\n      <Slots.root {...nativeProps}>\n        <Slots.inner>{stackChildren}</Slots.inner>\n      </Slots.root>\n    );\n  }\n\n  return <Slots.root {...nativeProps}>{stackChildren}</Slots.root>;\n};\n\nfunction _processStackChildren(\n  children: React.ReactNode,\n  { disableShrink, enableScopedSelectors }: { disableShrink: boolean; enableScopedSelectors: boolean },\n): (React.ReactChild | React.ReactFragment | React.ReactPortal)[] {\n  let childrenArray = React.Children.toArray(children);\n\n  childrenArray = React.Children.map(childrenArray, child => {\n    if (!child || !React.isValidElement(child)) {\n      return child;\n    }\n\n    if (child.type === React.Fragment) {\n      return child.props.children\n        ? _processStackChildren(child.props.children, { disableShrink, enableScopedSelectors })\n        : null;\n    }\n\n    const childAsReactElement = child as React.ReactElement;\n\n    let defaultItemProps: IStackItemProps = {};\n    if (_isStackItem(child)) {\n      defaultItemProps = { shrink: !disableShrink };\n    }\n    const childClassName = childAsReactElement.props.className;\n\n    return React.cloneElement(childAsReactElement, {\n      ...defaultItemProps,\n      ...childAsReactElement.props,\n      ...(childClassName && { className: childClassName }),\n      ...(enableScopedSelectors && { className: css(StackGlobalClassNames.child, childClassName) }),\n    });\n  });\n\n  return childrenArray;\n}\n\nfunction _isStackItem(item: React.ReactNode): item is typeof StackItem {\n  // In theory, we should be able to just check item.type === StackItem.\n  // However, under certain unclear circumstances (see https://github.com/microsoft/fluentui/issues/10785),\n  // the object identity is different despite the function implementation being the same.\n  return (\n    !!item &&\n    typeof item === 'object' &&\n    !!(item as React.ReactElement).type &&\n    // StackItem is generated by createComponent, so we need to check its displayName instead of name\n    ((item as React.ReactElement).type as React.ComponentType).displayName === StackItem.displayName\n  );\n}\n\nconst StackStatics = {\n  Item: StackItem,\n};\n\nexport const Stack: React.FunctionComponent<IStackProps> & {\n  Item: React.FunctionComponent<IStackItemProps>;\n} = createComponent(StackView, {\n  displayName: 'Stack',\n  styles,\n  statics: StackStatics,\n});\n\nexport default Stack;\n", "import type { ITheme } from '../../Styling';\nimport type { IStackProps } from './Stack.types';\n\n// Helper function that converts a themed spacing key (if given) to the corresponding themed spacing value.\nconst _getThemedSpacing = (space: string, theme: ITheme): string => {\n  if (theme.spacing.hasOwnProperty(space)) {\n    return theme.spacing[space as keyof typeof theme.spacing];\n  }\n  return space;\n};\n\n// Helper function that takes a gap as a string and converts it into a { value, unit } representation.\nconst _getValueUnitGap = (gap: string): { value: number; unit: string } => {\n  const numericalPart = parseFloat(gap);\n  const numericalValue = isNaN(numericalPart) ? 0 : numericalPart;\n  const numericalString = isNaN(numericalPart) ? '' : numericalPart.toString();\n\n  const unitPart = gap.substring(numericalString.toString().length);\n\n  return {\n    value: numericalValue,\n    unit: unitPart || 'px',\n  };\n};\n\n/**\n * Takes in a gap size in either a CSS-style format (e.g. 10 or \"10px\")\n *  or a key of a themed spacing value (e.g. \"s1\").\n * Returns the separate numerical value of the padding (e.g. 10)\n *  and the CSS unit (e.g. \"px\").\n */\nexport const parseGap = (\n  gap: IStackProps['gap'],\n  theme: ITheme,\n): { rowGap: { value: number; unit: string }; columnGap: { value: number; unit: string } } => {\n  if (gap === undefined || gap === '') {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px',\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px',\n      },\n    };\n  }\n\n  if (typeof gap === 'number') {\n    return {\n      rowGap: {\n        value: gap,\n        unit: 'px',\n      },\n      columnGap: {\n        value: gap,\n        unit: 'px',\n      },\n    };\n  }\n\n  const splitGap = gap.split(' ');\n\n  // If the array has more than two values, then return 0px.\n  if (splitGap.length > 2) {\n    return {\n      rowGap: {\n        value: 0,\n        unit: 'px',\n      },\n      columnGap: {\n        value: 0,\n        unit: 'px',\n      },\n    };\n  }\n\n  // If the array has two values, then parse each one.\n  if (splitGap.length === 2) {\n    return {\n      rowGap: _getValueUnitGap(_getThemedSpacing(splitGap[0], theme)),\n      columnGap: _getValueUnitGap(_getThemedSpacing(splitGap[1], theme)),\n    };\n  }\n\n  // Else, parse the numerical value and pass it as both the vertical and horizontal gap.\n  const calculatedGap = _getValueUnitGap(_getThemedSpacing(gap, theme));\n\n  return {\n    rowGap: calculatedGap,\n    columnGap: calculatedGap,\n  };\n};\n\n/**\n * Takes in a padding in a CSS-style format (e.g. 10, \"10px\", \"10px 10px\", etc.)\n *  where the separate padding values can also be the key of a themed spacing value\n *  (e.g. \"s1 m\", \"10px l1 20px l2\", etc.).\n * Returns a CSS-style padding.\n */\nexport const parsePadding = (padding: number | string | undefined, theme: ITheme): number | string | undefined => {\n  if (padding === undefined || typeof padding === 'number' || padding === '') {\n    return padding;\n  }\n\n  const paddingValues = padding.split(' ');\n  if (paddingValues.length < 2) {\n    return _getThemedSpacing(padding, theme);\n  }\n\n  return paddingValues.reduce((padding1: string, padding2: string) => {\n    return _getThemedSpacing(padding1, theme) + ' ' + _getThemedSpacing(padding2, theme);\n  });\n};\n", "import { getGlobalClassNames } from '../../Styling';\nimport { GlobalClassNames as StackItemGlobalClassNames } from './StackItem/StackItem.styles';\nimport { parseGap, parsePadding } from './StackUtils';\nimport type { IStackComponent, IStackStyles, IStackStylesReturnType } from './Stack.types';\n\nconst nameMap: { [key: string]: string } = {\n  start: 'flex-start',\n  end: 'flex-end',\n};\n\nexport const GlobalClassNames = {\n  root: 'ms-Stack',\n  inner: 'ms-Stack-inner',\n  child: 'ms-Stack-child',\n};\n\nexport const styles: IStackComponent['styles'] = (props, theme, tokens): IStackStylesReturnType => {\n  const {\n    className,\n    disableShrink,\n    enableScopedSelectors,\n    grow,\n    horizontal,\n    horizontalAlign,\n    reversed,\n    verticalAlign,\n    verticalFill,\n    wrap,\n  } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  /* eslint-disable deprecation/deprecation */\n  const childrenGap = tokens && tokens.childrenGap ? tokens.childrenGap : props.gap;\n  const maxHeight = tokens && tokens.maxHeight ? tokens.maxHeight : props.maxHeight;\n  const maxWidth = tokens && tokens.maxWidth ? tokens.maxWidth : props.maxWidth;\n  const padding = tokens && tokens.padding ? tokens.padding : props.padding;\n  /* eslint-enable deprecation/deprecation */\n\n  const { rowGap, columnGap } = parseGap(childrenGap, theme);\n\n  const horizontalMargin = `${-0.5 * columnGap.value}${columnGap.unit}`;\n  const verticalMargin = `${-0.5 * rowGap.value}${rowGap.unit}`;\n\n  // styles to be applied to all direct children regardless of wrap or direction\n  const childStyles = {\n    textOverflow: 'ellipsis',\n  };\n\n  const childSelector = '> ' + (enableScopedSelectors ? '.' + GlobalClassNames.child : '*');\n\n  const disableShrinkStyles = {\n    // flexShrink styles are applied by the StackItem\n    [`${childSelector}:not(.${StackItemGlobalClassNames.root})`]: {\n      flexShrink: 0,\n    },\n  };\n\n  if (wrap) {\n    return {\n      root: [\n        classNames.root,\n        {\n          flexWrap: 'wrap',\n          maxWidth,\n          maxHeight,\n          width: 'auto',\n          overflow: 'visible',\n          height: '100%',\n        },\n        horizontalAlign && {\n          [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n        },\n        verticalAlign && {\n          [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n        },\n        className,\n        {\n          // not allowed to be overridden by className\n          // since this is necessary in order to prevent collapsing margins\n          display: 'flex',\n        },\n        horizontal && {\n          height: verticalFill ? '100%' : 'auto',\n        },\n      ],\n\n      inner: [\n        classNames.inner,\n        {\n          display: 'flex',\n          flexWrap: 'wrap',\n          marginLeft: horizontalMargin,\n          marginRight: horizontalMargin,\n          marginTop: verticalMargin,\n          marginBottom: verticalMargin,\n          overflow: 'visible',\n          boxSizing: 'border-box',\n          padding: parsePadding(padding, theme),\n          // avoid unnecessary calc() calls if horizontal gap is 0\n          width: columnGap.value === 0 ? '100%' : `calc(100% + ${columnGap.value}${columnGap.unit})`,\n          maxWidth: '100vw',\n\n          [childSelector]: {\n            margin: `${0.5 * rowGap.value}${rowGap.unit} ${0.5 * columnGap.value}${columnGap.unit}`,\n\n            ...childStyles,\n          },\n        },\n        disableShrink && disableShrinkStyles,\n        horizontalAlign && {\n          [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n        },\n        verticalAlign && {\n          [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n        },\n        horizontal && {\n          flexDirection: reversed ? 'row-reverse' : 'row',\n\n          // avoid unnecessary calc() calls if vertical gap is 0\n          height: rowGap.value === 0 ? '100%' : `calc(100% + ${rowGap.value}${rowGap.unit})`,\n\n          [childSelector]: {\n            maxWidth: columnGap.value === 0 ? '100%' : `calc(100% - ${columnGap.value}${columnGap.unit})`,\n          },\n        },\n        !horizontal && {\n          flexDirection: reversed ? 'column-reverse' : 'column',\n          height: `calc(100% + ${rowGap.value}${rowGap.unit})`,\n\n          [childSelector]: {\n            maxHeight: rowGap.value === 0 ? '100%' : `calc(100% - ${rowGap.value}${rowGap.unit})`,\n          },\n        },\n      ],\n    } as IStackStyles;\n  }\n\n  return {\n    root: [\n      classNames.root,\n      {\n        display: 'flex',\n        flexDirection: horizontal ? (reversed ? 'row-reverse' : 'row') : reversed ? 'column-reverse' : 'column',\n        flexWrap: 'nowrap',\n        width: 'auto',\n        height: verticalFill ? '100%' : 'auto',\n        maxWidth,\n        maxHeight,\n        padding: parsePadding(padding, theme),\n        boxSizing: 'border-box',\n\n        [childSelector]: childStyles,\n      },\n      disableShrink && disableShrinkStyles,\n      grow && {\n        flexGrow: grow === true ? 1 : grow,\n      },\n\n      horizontalAlign && {\n        [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n      },\n      verticalAlign && {\n        [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n      },\n      horizontal &&\n        columnGap.value > 0 && {\n          // apply gap margin to every direct child except the first direct child if the direction is not reversed,\n          // and the last direct one if it is\n          [reversed ? `${childSelector}:not(:last-child)` : `${childSelector}:not(:first-child)`]: {\n            marginLeft: `${columnGap.value}${columnGap.unit}`,\n          },\n        },\n      !horizontal &&\n        rowGap.value > 0 && {\n          // apply gap margin to every direct child except the first direct child if the direction is not reversed,\n          // and the last direct one if it is\n          [reversed ? `${childSelector}:not(:last-child)` : `${childSelector}:not(:first-child)`]: {\n            marginTop: `${rowGap.value}${rowGap.unit}`,\n          },\n        },\n      className,\n    ],\n    // TODO: this cast may be hiding some potential issues with styling and name\n    //        lookups and should be removed\n  } as IStackStyles;\n};\n"],
  "mappings": "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",
  "names": ["React", "name_1", "styles", "React", "React", "React", "GlobalClassNames", "GlobalClassNames"]
}
