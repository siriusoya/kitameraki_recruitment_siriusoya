{
  "version": 3,
  "sources": ["../../node_modules/@fluentui/react/lib/components/TextField/components/TextField/TextField.base.tsx", "../../node_modules/@fluentui/react/lib/components/Label/components/Label/Label.base.tsx", "../../node_modules/@fluentui/react/lib/components/Label/components/Label/Label.styles.ts", "../../node_modules/@fluentui/react/lib/components/Label/components/Label/Label.tsx", "../../node_modules/@fluentui/react/lib/components/Icon/components/Icon/Icon.base.tsx", "../../node_modules/@fluentui/react/lib/components/Icon/components/Icon/Icon.types.ts", "../../node_modules/@fluentui/react/lib/components/Image/components/Image/Image.base.tsx", "../../node_modules/@fluentui/react/lib/components/Image/components/Image/Image.types.ts", "../../node_modules/@fluentui/react-hooks/lib/version.ts", "../../node_modules/@fluentui/react-hooks/lib/useAsync.ts", "../../node_modules/@fluentui/react-hooks/lib/useBoolean.ts", "../../node_modules/@fluentui/react-hooks/lib/useConst.ts", "../../node_modules/@fluentui/react-hooks/lib/useConstCallback.ts", "../../node_modules/@fluentui/react-hooks/lib/useControllableValue.ts", "../../node_modules/@fluentui/react-hooks/lib/useEventCallback.ts", "../../node_modules/@fluentui/react-hooks/lib/useForceUpdate.ts", "../../node_modules/@fluentui/react-hooks/lib/useId.ts", "../../node_modules/@fluentui/react-hooks/lib/useMergedRefs.ts", "../../node_modules/@fluentui/react-hooks/lib/useMount.ts", "../../node_modules/@fluentui/react-hooks/lib/useMountSync.ts", "../../node_modules/@fluentui/react-hooks/lib/useOnEvent.ts", "../../node_modules/@fluentui/react-hooks/lib/usePrevious.ts", "../../node_modules/@fluentui/react-hooks/lib/useRefEffect.ts", "../../node_modules/@fluentui/react-hooks/lib/useSetInterval.ts", "../../node_modules/@fluentui/react-hooks/lib/useSetTimeout.ts", "../../node_modules/@fluentui/react-hooks/lib/useTarget.ts", "../../node_modules/@fluentui/react-window-provider/lib/WindowProvider.tsx", "../../node_modules/@fluentui/react-window-provider/lib/version.ts", "../../node_modules/@fluentui/react-hooks/lib/useUnmount.ts", "../../node_modules/@fluentui/react-hooks/lib/useWarnings.ts", "../../node_modules/@fluentui/react/lib/components/Image/components/Image/Image.styles.ts", "../../node_modules/@fluentui/react/lib/components/Image/components/Image/Image.tsx", "../../node_modules/@fluentui/react/lib/components/Icon/components/Icon/FontIcon.tsx", "../../node_modules/@fluentui/react/lib/components/Icon/components/Icon/Icon.styles.ts", "../../node_modules/@fluentui/react/lib/components/Icon/components/Icon/Icon.tsx", "../../node_modules/@fluentui/react/lib/components/Icon/components/Icon/ImageIcon.tsx", "../../node_modules/@fluentui/react/lib/components/TextField/components/TextField/TextField.styles.tsx", "../../node_modules/@fluentui/react/lib/components/TextField/components/TextField/TextField.ts", "../../node_modules/@fluentui/react/lib/components/TextField/MaskedTextField/components/TextField/MaskedTextField/MaskedTextField.tsx", "../../node_modules/@fluentui/react/lib/components/TextField/MaskedTextField/components/TextField/MaskedTextField/inputMask.ts"],
  "sourcesContent": ["import * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  Async,\n  classNamesFunction,\n  DelayedRender,\n  getId,\n  getNativeProps,\n  getWindow,\n  initializeComponentRef,\n  inputProperties,\n  isControlled,\n  isIE11,\n  textAreaProperties,\n  warn,\n  warnControlledUsage,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { ILabelStyleProps, ILabelStyles } from '../../Label';\nimport type { IStyleFunctionOrObject } from '../../Utilities';\nimport type { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\n\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\n\n/** @internal */\nexport interface ITextFieldState {\n  /** The currently displayed value if uncontrolled. */\n  uncontrolledValue: string | undefined;\n\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /**\n   * Dynamic error message returned by `onGetErrorMessage`.\n   * Use `this._errorMessage` to get the actual current error message.\n   */\n  errorMessage: string | JSX.Element;\n\n  /**\n   * Whether this field has `type='password'` and `canRevealPassword=true`, and the password is\n   * currently being revealed.\n   */\n  isRevealingPassword?: boolean;\n}\n\n/** @internal */\nexport interface ITextFieldSnapshot {\n  /**\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\n   * selection/cursor after the change completes.\n   */\n  selection?: [number | null, number | null];\n}\n\nconst DEFAULT_STATE_VALUE = '';\nconst COMPONENT_NAME = 'TextField';\n\nconst REVEAL_ICON_NAME = 'RedEye';\nconst HIDE_ICON_NAME = 'Hide';\n\nexport class TextFieldBase\n  extends React.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot>\n  implements ITextField\n{\n  public static defaultProps: ITextFieldProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n  };\n\n  /** Fallback ID if none is provided in props. Access proper value via `this._id`. */\n  private _fallbackId: string;\n  private _descriptionId: string;\n  private _labelId: string;\n  private _prefixId: string;\n  private _suffixId: string;\n  private _delayedValidate: (value: string | undefined) => void;\n  private _lastValidation: number;\n  private _latestValidateValue: string | undefined;\n  private _hasWarnedNullValue: boolean | undefined;\n  private _textElement = React.createRef<HTMLTextAreaElement | HTMLInputElement>();\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\n  private _async: Async;\n  /** Most recent value from a change or input event, to help avoid processing events twice */\n  private _lastChangeValue: string | undefined;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage',\n      });\n    }\n\n    this._fallbackId = getId(COMPONENT_NAME);\n    this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    this._labelId = getId(COMPONENT_NAME + 'Label');\n    this._prefixId = getId(COMPONENT_NAME + 'Prefix');\n    this._suffixId = getId(COMPONENT_NAME + 'Suffix');\n\n    this._warnControlledUsage();\n\n    let { defaultValue = DEFAULT_STATE_VALUE } = props;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    this.state = {\n      uncontrolledValue: this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: '',\n    };\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string | undefined {\n    return _getValue(this.props, this.state);\n  }\n\n  public componentDidMount(): void {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null {\n    return {\n      selection: [this.selectionStart, this.selectionEnd],\n    };\n  }\n\n  public componentDidUpdate(\n    prevProps: ITextFieldProps,\n    prevState: ITextFieldState,\n    snapshot: ITextFieldSnapshot,\n  ): void {\n    const props = this.props;\n    const { selection = [null, null] } = snapshot || {};\n    const [start, end] = selection;\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    if (prevProps.value !== props.value) {\n      // Only if the value in props changed, reset the record of the last value seen by a\n      // change/input event (don't do this if the value in state changed, since at least in tests\n      // the state update may happen before the second event in a series)\n      this._lastChangeValue = undefined;\n    }\n\n    const prevValue = _getValue(prevProps, prevState);\n    const value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({ errorMessage: '' });\n      }\n\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      borderless,\n      className,\n      disabled,\n      invalid,\n      iconProps,\n      inputClassName,\n      label,\n      multiline,\n      required,\n      underlined,\n      prefix,\n      resizable,\n      suffix,\n      theme,\n      styles,\n      autoAdjustHeight,\n      canRevealPassword,\n      revealPasswordAriaLabel,\n      type,\n      onRenderPrefix = this._onRenderPrefix,\n      onRenderSuffix = this._onRenderSuffix,\n      onRenderLabel = this._onRenderLabel,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n    const { isFocused, isRevealingPassword } = this.state;\n    const errorMessage = this._errorMessage;\n    const isInvalid = typeof invalid === 'boolean' ? invalid : !!errorMessage;\n\n    const hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    const classNames = (this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      focused: isFocused,\n      required,\n      multiline,\n      hasLabel: !!label,\n      hasErrorMessage: isInvalid,\n      borderless,\n      resizable,\n      hasIcon: !!iconProps,\n      underlined,\n      inputClassName,\n      autoAdjustHeight,\n      hasRevealButton,\n    }));\n\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      <div ref={this.props.elementRef} className={classNames.root}>\n        <div className={classNames.wrapper}>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n          <div className={classNames.fieldGroup}>\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\n              <div className={classNames.prefix} id={this._prefixId}>\n                {onRenderPrefix(this.props, this._onRenderPrefix)}\n              </div>\n            )}\n            {multiline ? this._renderTextArea() : this._renderInput()}\n            {iconProps && <Icon className={classNames.icon} {...iconProps} />}\n            {hasRevealButton && (\n              // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n              <button\n                aria-label={revealPasswordAriaLabel}\n                className={classNames.revealButton}\n                onClick={this._onRevealButtonClick}\n                aria-pressed={!!isRevealingPassword}\n                type=\"button\"\n              >\n                <span className={classNames.revealSpan}>\n                  <Icon\n                    className={classNames.revealIcon}\n                    iconName={isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME}\n                  />\n                </span>\n              </button>\n            )}\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\n              <div className={classNames.suffix} id={this._suffixId}>\n                {onRenderSuffix(this.props, this._onRenderSuffix)}\n              </div>\n            )}\n          </div>\n        </div>\n        {this._isDescriptionAvailable && (\n          <span id={this._descriptionId}>\n            {onRenderDescription(this.props, this._onRenderDescription)}\n            {errorMessage && (\n              <div role=\"alert\">\n                <DelayedRender>{this._renderErrorMessage()}</DelayedRender>\n              </div>\n            )}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  }\n\n  /**\n   * Blurs the text field.\n   */\n  public blur() {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  }\n\n  /**\n   * Gets the selection start of the text field\n   */\n  public get selectionStart(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\n  }\n\n  /**\n   * Gets the selection end of the text field\n   */\n  public get selectionEnd(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  public setSelectionRange(start: number, end: number): void {\n    if (this._textElement.current) {\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\n    }\n  }\n\n  private _warnControlledUsage(prevProps?: ITextFieldProps): void {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly',\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\n        `Warning: 'value' prop on '${COMPONENT_NAME}' should not be null. Consider using an ` +\n          'empty string to clear the component or undefined to indicate an uncontrolled component.',\n      );\n    }\n  }\n\n  /** Returns `props.id` if available, or a fallback if not. */\n  private get _id(): string {\n    return this.props.id || this._fallbackId;\n  }\n\n  private get _isControlled(): boolean {\n    return isControlled(this.props, 'value');\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true }, () => {\n      if (this.props.validateOnFocusIn) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false }, () => {\n      if (this.props.validateOnFocusOut) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\n    const { label, required } = props;\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    if (label) {\n      return (\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled} id={this._labelId}>\n          {props.label}\n        </Label>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\n    if (props.description) {\n      return <span className={this._classNames.description}>{props.description}</span>;\n    }\n    return null;\n  };\n\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\n    const { prefix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\n  }\n\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\n    const { suffix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\n  }\n\n  /**\n   * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  private get _errorMessage(): string | JSX.Element {\n    const { errorMessage = this.state.errorMessage } = this.props;\n    return errorMessage || '';\n  }\n\n  /**\n   * Renders error message based on the type of the message.\n   *\n   * - If error message is string, it will render using the built in styles.\n   * - If error message is an element, user has full control over how it's rendered.\n   */\n  private _renderErrorMessage(): JSX.Element | null {\n    const errorMessage = this._errorMessage;\n\n    return errorMessage ? (\n      typeof errorMessage === 'string' ? (\n        <p className={this._classNames.errorMessage}>\n          <span data-automation-id=\"error-message\">{errorMessage}</span>\n        </p>\n      ) : (\n        <div className={this._classNames.errorMessage} data-automation-id=\"error-message\">\n          {errorMessage}\n        </div>\n      )\n    ) : null;\n  }\n\n  /**\n   * If a custom description render function is supplied then treat description as always available.\n   * Otherwise defer to the presence of description or error message text.\n   */\n  private get _isDescriptionAvailable(): boolean {\n    const props = this.props;\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    const { invalid = !!this._errorMessage } = this.props;\n    const textAreaProps = getNativeProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>>(\n      this.props,\n      textAreaProperties,\n      ['defaultValue'],\n    );\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <textarea\n        id={this._id}\n        {...textAreaProps}\n        ref={this._textElement as React.RefObject<HTMLTextAreaElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={invalid}\n        aria-label={this.props.ariaLabel}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _renderInput(): JSX.Element | null {\n    const {\n      ariaLabel,\n      invalid = !!this._errorMessage,\n      onRenderPrefix,\n      onRenderSuffix,\n      prefix,\n      suffix,\n      type = 'text',\n      label,\n    } = this.props;\n\n    // build aria-labelledby list from label, prefix, and suffix\n    const labelIds = [];\n    label && labelIds.push(this._labelId);\n    (prefix !== undefined || onRenderPrefix) && labelIds.push(this._prefixId);\n    (suffix !== undefined || onRenderSuffix) && labelIds.push(this._suffixId);\n\n    const inputProps: React.InputHTMLAttributes<HTMLInputElement> & React.RefAttributes<HTMLInputElement> = {\n      type: this.state.isRevealingPassword ? 'text' : type,\n      id: this._id,\n      ...getNativeProps(this.props, inputProperties, ['defaultValue', 'type']),\n      'aria-labelledby': this.props['aria-labelledby'] || (labelIds.length > 0 ? labelIds.join(' ') : undefined),\n      ref: this._textElement as React.RefObject<HTMLInputElement>,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      'aria-label': ariaLabel,\n      'aria-describedby': this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      'aria-invalid': invalid,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur,\n    };\n\n    const defaultRender = (updatedInputProps: React.InputHTMLAttributes<HTMLInputElement>) => {\n      return <input {...updatedInputProps} />;\n    };\n    const onRenderInput = this.props.onRenderInput || defaultRender;\n    return onRenderInput(inputProps, defaultRender);\n  }\n\n  private _onRevealButtonClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    this.setState(prevState => ({ isRevealingPassword: !prevState.isRevealingPassword }));\n  };\n\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n    // which have *probably* been fixed now:\n    // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n    // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n\n    // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n    // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n    const element = event.target as HTMLInputElement;\n    const value = element.value;\n    // Ignore this event if any of the following are true:\n    // - the value is undefined (in case one of the IE bugs comes back)\n    // - it's a duplicate event (important since onInputChange is called twice per actual user event)\n    // - it's the same as the previous value\n    const previousValue = _getValue(this.props, this.state) || '';\n    if (value === undefined || value === this._lastChangeValue || value === previousValue) {\n      this._lastChangeValue = undefined;\n      return;\n    }\n    this._lastChangeValue = value;\n\n    this.props.onChange?.(event, value);\n\n    if (!this._isControlled) {\n      // ONLY if this is an uncontrolled component, update the displayed value.\n      // (Controlled components must update the `value` prop from `onChange`.)\n      this.setState({ uncontrolledValue: value });\n    }\n  };\n\n  private _validate(value: string | undefined): void {\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    const onGetErrorMessage = this.props.onGetErrorMessage;\n    const result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({ errorMessage: result });\n        this._notifyAfterValidate(value, result);\n      } else {\n        const currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string | JSX.Element) => {\n          if (currentValidation === this._lastValidation) {\n            this.setState({ errorMessage });\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string | JSX.Element): void {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  }\n\n  private _adjustInputHeight(): void {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      const textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  }\n}\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props: ITextFieldProps, state: ITextFieldState): string | undefined {\n  const { value = state.uncontrolledValue } = props;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props: ITextFieldProps): boolean {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n\n// Only calculate this once across all TextFields, since will stay the same\nlet __browserNeedsRevealButton: boolean | undefined;\n\nfunction _browserNeedsRevealButton() {\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    const win = getWindow();\n\n    if (win?.navigator) {\n      // Edge, Chromium Edge\n      const isEdge = /Edg/.test(win.navigator.userAgent || '');\n\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n  return __browserNeedsRevealButton;\n}\n", "import * as React from 'react';\nimport { divProperties, getNativeProps } from '../../Utilities';\nimport { classNamesFunction } from '../../Utilities';\nimport type { ILabelProps, ILabelStyleProps, ILabelStyles } from './Label.types';\n\nconst getClassNames = classNamesFunction<ILabelStyleProps, ILabelStyles>({\n  // Label is used a lot by other components.\n  // It's likely to see expected cases which pass different className to the Label.\n  // Therefore setting a larger cache size.\n  cacheSize: 100,\n});\n\nexport class LabelBase extends React.Component<ILabelProps, {}> {\n  public render(): JSX.Element {\n    const { as: RootType = 'label', children, className, disabled, styles, required, theme } = this.props;\n    const classNames = getClassNames(styles, {\n      className,\n      disabled,\n      required,\n      theme: theme!,\n    });\n    return (\n      <RootType {...getNativeProps(this.props, divProperties)} className={classNames.root}>\n        {children}\n      </RootType>\n    );\n  }\n}\n", "import { HighContrastSelector, FontWeights, getHighContrastNoAdjustStyle } from '../../Styling';\nimport type { ILabelStyleProps, ILabelStyles } from './Label.types';\n\nexport const getStyles = (props: ILabelStyleProps): ILabelStyles => {\n  const { theme, className, disabled, required } = props;\n  const { semanticColors } = theme;\n\n  // Tokens\n  const labelFontWeight = FontWeights.semibold;\n  const labelColor = semanticColors.bodyText;\n  const labelDisabledColor = semanticColors.disabledBodyText;\n  const labelRequiredStarColor = semanticColors.errorText;\n\n  return {\n    root: [\n      'ms-Label',\n      theme.fonts.medium,\n      {\n        fontWeight: labelFontWeight,\n        color: labelColor,\n        boxSizing: 'border-box',\n        boxShadow: 'none',\n        margin: 0,\n        display: 'block',\n        padding: '5px 0',\n        wordWrap: 'break-word',\n        overflowWrap: 'break-word',\n      },\n      disabled && {\n        color: labelDisabledColor,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'GrayText',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      required && {\n        selectors: {\n          '::after': {\n            content: `' *'`,\n            color: labelRequiredStarColor,\n            paddingRight: 12,\n          },\n        },\n      },\n      className,\n    ],\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { LabelBase } from './Label.base';\nimport { getStyles } from './Label.styles';\nimport type { ILabelProps, ILabelStyleProps, ILabelStyles } from './Label.types';\n\nexport const Label: React.FunctionComponent<ILabelProps> = styled<ILabelProps, ILabelStyleProps, ILabelStyles>(\n  LabelBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Label',\n  },\n);\n", "import * as React from 'react';\n\nimport { IconType } from './Icon.types';\nimport { Image } from '../Image/Image';\nimport { ImageLoadState } from '../Image/Image.types';\nimport { getNativeProps, htmlElementProperties, classNamesFunction } from '../../Utilities';\nimport { getIconContent } from './FontIcon';\nimport type { IIconProps, IIconStyleProps, IIconStyles } from './Icon.types';\nimport type { IImageProps } from '../Image/Image.types';\n\nexport interface IIconState {\n  imageLoadError: boolean;\n}\n\nconst getClassNames = classNamesFunction<IIconStyleProps, IIconStyles>({\n  // Icon is used a lot by other components.\n  // It's likely to see expected cases which pass different className to the Icon.\n  // Therefore setting a larger cache size.\n  cacheSize: 100,\n});\n\nexport class IconBase extends React.Component<IIconProps, IIconState> {\n  constructor(props: IIconProps) {\n    super(props);\n    this.state = {\n      imageLoadError: false,\n    };\n  }\n\n  public render() {\n    const { children, className, styles, iconName, imageErrorAs, theme } = this.props;\n    const isPlaceholder = typeof iconName === 'string' && iconName.length === 0;\n    const isImage =\n      // eslint-disable-next-line deprecation/deprecation\n      !!this.props.imageProps || this.props.iconType === IconType.image || this.props.iconType === IconType.Image;\n    const iconContent = getIconContent(iconName) || {};\n    const { iconClassName, children: iconContentChildren, mergeImageProps } = iconContent;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      iconClassName,\n      isImage,\n      isPlaceholder,\n    });\n\n    const RootType = isImage ? 'span' : 'i';\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, htmlElementProperties, [\n      'aria-label',\n    ]);\n    const { imageLoadError } = this.state;\n    const imageProps: IImageProps = {\n      ...this.props.imageProps,\n      onLoadingStateChange: this._onImageLoadingStateChange,\n    };\n    const ImageType = (imageLoadError && imageErrorAs) || Image;\n\n    // eslint-disable-next-line deprecation/deprecation\n    const ariaLabel = this.props['aria-label'] || this.props.ariaLabel;\n    const accessibleName = imageProps.alt || ariaLabel || this.props.title;\n    const hasName = !!(\n      accessibleName ||\n      this.props['aria-labelledby'] ||\n      imageProps['aria-label'] ||\n      imageProps['aria-labelledby']\n    );\n    const containerProps = hasName\n      ? {\n          role: isImage || mergeImageProps ? undefined : 'img',\n          'aria-label': isImage || mergeImageProps ? undefined : accessibleName,\n        }\n      : {\n          'aria-hidden': true,\n        };\n\n    let finalIconContentChildren = iconContentChildren;\n\n    if (mergeImageProps && iconContentChildren && typeof iconContentChildren === 'object' && accessibleName) {\n      finalIconContentChildren = React.cloneElement(iconContentChildren, {\n        alt: accessibleName,\n      });\n    }\n\n    return (\n      <RootType\n        data-icon-name={iconName}\n        {...containerProps}\n        {...nativeProps}\n        {...(mergeImageProps\n          ? {\n              title: undefined,\n              'aria-label': undefined,\n            }\n          : {})}\n        className={classNames.root}\n      >\n        {isImage ? <ImageType {...imageProps} /> : children || finalIconContentChildren}\n      </RootType>\n    );\n  }\n\n  private _onImageLoadingStateChange = (state: ImageLoadState): void => {\n    if (this.props.imageProps && this.props.imageProps.onLoadingStateChange) {\n      this.props.imageProps.onLoadingStateChange(state);\n    }\n    if (state === ImageLoadState.error) {\n      this.setState({ imageLoadError: true });\n    }\n  };\n}\n", "import * as React from 'react';\nimport type { IImageProps } from '../Image/Image.types';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IBaseProps, IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`\n * {@docCategory Icon}\n */\nexport enum IconType {\n  /**\n   * Render using the fabric icon font.\n   * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`\n   */\n  default = 0,\n\n  /**\n   * Render using an image, where imageProps would be used.\n   * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`\n   */\n  image = 1,\n\n  /**\n   * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`\n   */\n  Default = 100000,\n\n  /**\n   * @deprecated Icon type is inferred based on presence of `IIconProps.imageProps`\n   */\n  Image = 100001,\n}\n\n/**\n * {@docCategory Icon}\n */\nexport interface IIconProps extends IBaseProps, React.HTMLAttributes<HTMLElement> {\n  /**\n   * The name of the icon to use from the icon font.\n   * If string is empty, a placeholder icon will be rendered the same width as an icon.\n   */\n  iconName?: string;\n\n  /**\n   * The aria label of the icon for the benefit of screen readers.\n   * @deprecated Use the native prop `aria-label`\n   */\n  ariaLabel?: string;\n\n  /**\n   * The type of icon to render (image or icon font).\n   * @deprecated Inferred based on the presence of `imageProps`\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  iconType?: IconType;\n\n  /**\n   * If rendering an image icon, these props will be passed to the Image component.\n   */\n  imageProps?: IImageProps;\n\n  /**\n   * If rendering an image icon, this component will be rendered in the event that loading the image fails.\n   */\n  imageErrorAs?: React.ComponentType<IImageProps>;\n\n  /**\n   * Gets the styles for an Icon.\n   */\n  styles?: IStyleFunctionOrObject<IIconStyleProps, IIconStyles>;\n  theme?: ITheme;\n}\n\n/**\n * {@docCategory Icon}\n */\nexport interface IIconStyleProps {\n  className?: string;\n  iconClassName?: string;\n  isPlaceholder: boolean;\n  isImage: boolean;\n  styles?: Partial<IIconStyles>;\n  theme?: ITheme;\n}\n\n/**\n * {@docCategory Icon}\n */\nexport interface IIconStyles {\n  root?: IStyle;\n\n  /**\n   * @deprecated Use `root`.\n   */\n  imageContainer?: IStyle;\n}\n\n/**\n * Props for a basic icon component which only supports font glyphs and can't be targeted by customizations.\n * {@docCategory Icon}\n */\nexport interface IFontIconProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * The name of the icon to use from the icon font.\n   * If string is empty, a placeholder icon will be rendered the same width as an icon.\n   */\n  iconName?: string;\n\n  /**\n   * Custom class to style the icon.\n   */\n  className?: string;\n}\n\n/**\n * Props for a basic image icon component which doesn't directly provide image load error handling\n * and can't be targeted by customizations.\n * {@docCategory Icon}\n */\nexport interface IImageIconProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * Props passed to the Image component.\n   */\n  imageProps: IImageProps;\n\n  /**\n   * Custom class to style the icon.\n   */\n  className?: string;\n}\n", "import * as React from 'react';\nimport { classNamesFunction, getNativeProps, imgProperties } from '../../Utilities';\nimport { ImageCoverStyle, ImageFit, ImageLoadState } from './Image.types';\nimport { useIsomorphicLayoutEffect, useMergedRefs } from '@fluentui/react-hooks';\nimport type { IImageProps, IImageStyleProps, IImageStyles } from './Image.types';\n\nconst getClassNames = classNamesFunction<IImageStyleProps, IImageStyles>();\n\nexport interface IImageState {\n  loadState?: ImageLoadState;\n}\n\nconst SVG_REGEX = /\\.svg$/i;\nconst KEY_PREFIX = 'fabricImage';\n\nfunction useLoadState(\n  props: IImageProps,\n  imageElement: React.RefObject<HTMLImageElement>,\n): readonly [\n  ImageLoadState,\n  /* onImageLoad */ (ev: React.SyntheticEvent<HTMLImageElement>) => void,\n  /* onImageError */ (ev: React.SyntheticEvent<HTMLImageElement>) => void,\n] {\n  const { onLoadingStateChange, onLoad, onError, src } = props;\n\n  const [loadState, setLoadState] = React.useState<ImageLoadState>(ImageLoadState.notLoaded);\n\n  useIsomorphicLayoutEffect(() => {\n    // If the src property changes, reset the load state\n    // (does nothing if the load state is already notLoaded)\n    setLoadState(ImageLoadState.notLoaded);\n  }, [src]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps -- intended to run every render\n  React.useEffect(() => {\n    if (loadState === ImageLoadState.notLoaded) {\n      // testing if naturalWidth and naturalHeight are greater than zero is better than checking\n      // .complete, because .complete will also be set to true if the image breaks. However,\n      // for some browsers, SVG images do not have a naturalWidth or naturalHeight, so fall back\n      // to checking .complete for these images.\n      const isLoaded: boolean = imageElement.current\n        ? (src && imageElement.current.naturalWidth > 0 && imageElement.current.naturalHeight > 0) ||\n          (imageElement.current.complete && SVG_REGEX.test(src!))\n        : false;\n\n      if (isLoaded) {\n        setLoadState(ImageLoadState.loaded);\n      }\n    }\n  });\n\n  React.useEffect(() => {\n    onLoadingStateChange?.(loadState);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- should only run when loadState changes\n  }, [loadState]);\n\n  const onImageLoaded = React.useCallback(\n    (ev: React.SyntheticEvent<HTMLImageElement>) => {\n      onLoad?.(ev);\n      if (src) {\n        setLoadState(ImageLoadState.loaded);\n      }\n    },\n    [src, onLoad],\n  );\n\n  const onImageError = React.useCallback(\n    (ev: React.SyntheticEvent<HTMLImageElement>) => {\n      onError?.(ev);\n      setLoadState(ImageLoadState.error);\n    },\n    [onError],\n  );\n\n  return [loadState, onImageLoaded, onImageError] as const;\n}\n\nexport const ImageBase: React.FunctionComponent<IImageProps> = React.forwardRef<HTMLImageElement, IImageProps>(\n  (props, forwardedRef) => {\n    const frameElement = React.useRef<HTMLDivElement>() as React.RefObject<HTMLDivElement>;\n    const imageElement = React.useRef<HTMLImageElement>() as React.RefObject<HTMLImageElement>;\n    const [loadState, onImageLoaded, onImageError] = useLoadState(props, imageElement);\n\n    const imageProps = getNativeProps<React.ImgHTMLAttributes<HTMLImageElement>>(props, imgProperties, [\n      'width',\n      'height',\n    ]);\n    const {\n      src,\n      alt,\n      width,\n      height,\n      shouldFadeIn = true,\n      shouldStartVisible,\n      className,\n      imageFit,\n      role,\n      maximizeFrame,\n      styles,\n      theme,\n      loading,\n    } = props;\n    const coverStyle = useCoverStyle(props, loadState, imageElement, frameElement);\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      width,\n      height,\n      maximizeFrame,\n      shouldFadeIn,\n      shouldStartVisible,\n      isLoaded:\n        loadState === ImageLoadState.loaded || (loadState === ImageLoadState.notLoaded && props.shouldStartVisible),\n      isLandscape: coverStyle === ImageCoverStyle.landscape,\n      isCenter: imageFit === ImageFit.center,\n      isCenterContain: imageFit === ImageFit.centerContain,\n      isCenterCover: imageFit === ImageFit.centerCover,\n      isContain: imageFit === ImageFit.contain,\n      isCover: imageFit === ImageFit.cover,\n      isNone: imageFit === ImageFit.none,\n      isError: loadState === ImageLoadState.error,\n      isNotImageFit: imageFit === undefined,\n    });\n\n    // If image dimensions aren't specified, the natural size of the image is used.\n    return (\n      <div className={classNames.root} style={{ width: width, height: height }} ref={frameElement}>\n        <img\n          {...imageProps}\n          onLoad={onImageLoaded}\n          onError={onImageError}\n          key={KEY_PREFIX + props.src || ''}\n          className={classNames.image}\n          ref={useMergedRefs(imageElement, forwardedRef)}\n          src={src}\n          alt={alt}\n          role={role}\n          loading={loading}\n        />\n      </div>\n    );\n  },\n);\nImageBase.displayName = 'ImageBase';\n\nfunction useCoverStyle(\n  props: IImageProps,\n  loadState: ImageLoadState,\n  imageElement: React.RefObject<HTMLImageElement>,\n  frameElement: React.RefObject<HTMLDivElement>,\n) {\n  const previousLoadState = React.useRef(loadState);\n  const coverStyle = React.useRef<ImageCoverStyle | undefined>();\n\n  if (\n    coverStyle === undefined ||\n    (previousLoadState.current === ImageLoadState.notLoaded && loadState === ImageLoadState.loaded)\n  ) {\n    coverStyle.current = computeCoverStyle(props, loadState, imageElement, frameElement);\n  }\n\n  previousLoadState.current = loadState;\n\n  return coverStyle.current!;\n}\n\nfunction computeCoverStyle(\n  props: IImageProps,\n  loadState: ImageLoadState,\n  imageElement: React.RefObject<HTMLImageElement>,\n  frameElement: React.RefObject<HTMLDivElement>,\n): ImageCoverStyle {\n  const { imageFit, width, height } = props;\n\n  // Do not compute cover style if it was already specified in props\n  if (props.coverStyle !== undefined) {\n    return props.coverStyle;\n  } else if (\n    loadState === ImageLoadState.loaded &&\n    (imageFit === ImageFit.cover ||\n      imageFit === ImageFit.contain ||\n      imageFit === ImageFit.centerContain ||\n      imageFit === ImageFit.centerCover) &&\n    imageElement.current &&\n    frameElement.current\n  ) {\n    // Determine the desired ratio using the width and height props.\n    // If those props aren't available, measure measure the frame.\n    let desiredRatio;\n    if (\n      typeof width === 'number' &&\n      typeof height === 'number' &&\n      imageFit !== ImageFit.centerContain &&\n      imageFit !== ImageFit.centerCover\n    ) {\n      desiredRatio = width / height;\n    } else {\n      desiredRatio = frameElement.current.clientWidth / frameElement.current.clientHeight;\n    }\n\n    // Examine the source image to determine its original ratio.\n    const naturalRatio = imageElement.current.naturalWidth / imageElement.current.naturalHeight;\n\n    // Should we crop from the top or the sides?\n    if (naturalRatio > desiredRatio) {\n      return ImageCoverStyle.landscape;\n    }\n  }\n  return ImageCoverStyle.portrait;\n}\n", "import * as React from 'react';\nimport type { IStyle, ITheme } from '../../Styling';\nimport type { IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * {@docCategory Image}\n */\nexport interface IImage {}\n\n/**\n * {@docCategory Image}\n */\nexport interface IImageProps extends React.ImgHTMLAttributes<HTMLImageElement>, React.RefAttributes<HTMLImageElement> {\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules\n   */\n  styles?: IStyleFunctionOrObject<IImageStyleProps, IImageStyles>;\n\n  /**\n   * Theme provided by HOC.\n   */\n  theme?: ITheme;\n\n  /**\n   * Additional css class to apply to the Component\n   * @defaultvalue undefined\n   */\n  className?: string;\n\n  /**\n   * If true, fades the image in when loaded.\n   * @defaultvalue true\n   */\n  shouldFadeIn?: boolean;\n\n  /**\n   * If true, the image starts as visible and is hidden on error. Otherwise, the image is hidden until\n   * it is successfully loaded. This disables shouldFadeIn.\n   * @defaultvalue false;\n   */\n  shouldStartVisible?: boolean;\n\n  /**\n   * Used to determine how the image is scaled and cropped to fit the frame.\n   *\n   * @defaultvalue If both dimensions are provided, then the image is fit using `ImageFit.scale`.\n   * Otherwise, the image won't be scaled or cropped.\n   */\n  imageFit?: ImageFit;\n\n  /**\n   * @deprecated Not used. Use `onLoadingStateChange` and re-render the Image with a different src.\n   */\n  errorSrc?: string;\n\n  /**\n   * If true, the image frame will expand to fill its parent container.\n   */\n  maximizeFrame?: boolean;\n\n  /**\n   * Optional callback method for when the image load state has changed.\n   * The 'loadState' parameter indicates the current state of the Image.\n   */\n  onLoadingStateChange?: (loadState: ImageLoadState) => void;\n\n  /**\n   * Specifies the cover style to be used for this image. If not\n   * specified, this will be dynamically calculated based on the\n   * aspect ratio for the image.\n   */\n  coverStyle?: ImageCoverStyle;\n\n  /**\n   * Allows for browser-level image lazy-loading.\n   */\n  loading?: 'lazy' | 'eager';\n}\n\n/**\n * The possible methods that can be used to fit the image.\n * {@docCategory Image}\n */\nexport enum ImageFit {\n  /**\n   * The image is not scaled. The image is centered and cropped within the content box.\n   */\n  center = 0,\n\n  /**\n   * The image is scaled to maintain its aspect ratio while being fully contained within the frame. The image will\n   * be centered horizontally and vertically within the frame. The space in the top and bottom or in the sides of\n   * the frame will be empty depending on the difference in aspect ratio between the image and the frame.\n   */\n  contain = 1,\n\n  /**\n   * The image is scaled to maintain its aspect ratio while filling the frame. Portions of the image will be cropped\n   * from the top and bottom, or the sides, depending on the difference in aspect ratio between the image and the frame.\n   */\n  cover = 2,\n\n  /**\n   * Neither the image nor the frame are scaled. If their sizes do not match, the image will either be cropped or the\n   * frame will have empty space.\n   */\n  none = 3,\n\n  /**\n   * The image will be centered horizontally and vertically within the frame and maintains its aspect ratio. It will\n   * behave as ImageFit.center if the image's natural height or width is less than the Image frame's height or width,\n   * but if both natural height and width are larger than the frame it will behave as ImageFit.cover.\n   */\n  centerCover = 4,\n\n  /**\n   * The image will be centered horizontally and vertically within the frame and maintains its aspect ratio. It will\n   * behave as ImageFit.center if the image's natural height and width is less than the Image frame's height and width,\n   * but if either natural height or width are larger than the frame it will behave as ImageFit.contain.\n   */\n  centerContain = 5,\n}\n\n/**\n * The cover style to be used on the image\n * {@docCategory Image}\n */\nexport enum ImageCoverStyle {\n  /**\n   * The image will be shown at 100% height of container and the width will be scaled accordingly\n   */\n  landscape = 0,\n\n  /**\n   * The image will be shown at 100% width of container and the height will be scaled accordingly\n   */\n  portrait = 1,\n}\n\n/**\n * {@docCategory Image}\n */\nexport enum ImageLoadState {\n  /**\n   * The image has not yet been loaded, and there is no error yet.\n   */\n  notLoaded = 0,\n\n  /**\n   * The image has been loaded successfully.\n   */\n  loaded = 1,\n\n  /**\n   * An error has been encountered while loading the image.\n   */\n  error = 2,\n\n  /**\n   * @deprecated Not used. Use `onLoadingStateChange` and re-render the Image with a different src.\n   */\n  errorLoaded = 3,\n}\n\n/**\n * {@docCategory Image}\n */\nexport interface IImageStyleProps {\n  /**\n   * Accept theme prop.\n   */\n  theme: ITheme;\n\n  /**\n   * Accept custom classNames\n   */\n  className?: string;\n\n  /**\n   * If true, the image frame will expand to fill its parent container.\n   */\n  maximizeFrame?: boolean;\n\n  /**\n   * If true, the image is loaded\n   */\n  isLoaded?: boolean;\n\n  /**\n   * If true, fades the image in when loaded.\n   * @defaultvalue true\n   */\n  shouldFadeIn?: boolean;\n\n  /**\n   * If true, the image starts as visible and is hidden on error. Otherwise, the image is hidden until\n   * it is successfully loaded. This disables shouldFadeIn.\n   * @defaultvalue false;\n   */\n  shouldStartVisible?: boolean;\n\n  /**\n   * If true the image is coverStyle landscape instead of portrait\n   */\n  isLandscape?: boolean;\n\n  /**\n   * ImageFit booleans for center, cover, contain, centerContain, centerCover, none\n   */\n  isCenter?: boolean;\n  isContain?: boolean;\n  isCover?: boolean;\n  isCenterContain?: boolean;\n  isCenterCover?: boolean;\n  isNone?: boolean;\n\n  /**\n   * if true image load is in error\n   */\n  isError?: boolean;\n\n  /**\n   * if true, imageFit is undefined\n   */\n  isNotImageFit?: boolean;\n\n  /**\n   * Image width value\n   */\n  width?: number | string;\n\n  /**\n   * Image height value\n   */\n  height?: number | string;\n}\n\n/**\n * {@docCategory Image}\n */\nexport interface IImageStyles {\n  /**\n   * Style set for the root div element.\n   */\n  root: IStyle;\n  /**\n   * Style set for the img element.\n   */\n  image: IStyle;\n}\n", "// Do not modify this file; it is generated as part of publish.\n// The checked in version is a placeholder only and will not be updated.\nimport { setVersion } from '@fluentui/set-version';\nsetVersion('@fluentui/react-hooks', '8.6.29');", "import { Async } from '@fluentui/utilities';\nimport * as React from 'react';\n\n/**\n * Hook to provide an Async instance that is automatically cleaned up on dismount.\n */\nexport function useAsync() {\n  const asyncRef = React.useRef<Async>();\n  if (!asyncRef.current) {\n    asyncRef.current = new Async();\n  }\n  React.useEffect(() => {\n    return () => {\n      asyncRef.current?.dispose();\n      asyncRef.current = undefined;\n    };\n  }, []);\n  return asyncRef.current;\n}\n", "import * as React from 'react';\nimport { useConst } from './useConst';\n\n/** Updater callbacks returned by `useBoolean`. */\nexport interface IUseBooleanCallbacks {\n  /** Set the value to true. Always has the same identity. */\n  setTrue: () => void;\n  /** Set the value to false. Always has the same identity. */\n  setFalse: () => void;\n  /** Toggle the value. Always has the same identity. */\n  toggle: () => void;\n}\n\n/**\n * Hook to store a value and generate callbacks for setting the value to true or false.\n * The identity of the callbacks will always stay the same.\n *\n * @param initialState - Initial value\n * @returns Array with the current value and an object containing the updater callbacks.\n */\nexport function useBoolean(initialState: boolean): [boolean, IUseBooleanCallbacks] {\n  const [value, setValue] = React.useState(initialState);\n\n  const setTrue = useConst(() => () => {\n    setValue(true);\n  });\n  const setFalse = useConst(() => () => {\n    setValue(false);\n  });\n  const toggle = useConst(() => () => {\n    setValue(currentValue => !currentValue);\n  });\n\n  return [value, { setTrue, setFalse, toggle }];\n}\n", "import * as React from 'react';\n\n/**\n * Hook to initialize and return a constant value. Unlike `React.useMemo`, this is guaranteed to\n * always return the same value (and if the initializer is a function, only call it once).\n * This is similar to setting a private member in a class constructor.\n *\n * If the value should ever change based on dependencies, use `React.useMemo` instead.\n *\n * @param initialValue - Initial value, or function to get the initial value. Similar to `useState`,\n * only the value/function passed in the first time this is called is respected.\n * @returns The value. The identity of this value will always be the same.\n */\nexport function useConst<T>(initialValue: T | (() => T)): T {\n  // Use useRef to store the value because it's the least expensive built-in hook that works here\n  // (we could also use `const [value] = React.useState(initialValue)` but that's more expensive\n  // internally due to reducer handling which we don't need)\n  const ref = React.useRef<{ value: T }>();\n  if (ref.current === undefined) {\n    // Box the value in an object so we can tell if it's initialized even if the initializer\n    // returns/is undefined\n    ref.current = {\n      value: typeof initialValue === 'function' ? (initialValue as Function)() : initialValue,\n    };\n  }\n  return ref.current.value;\n}\n", "import * as React from 'react';\n\n/**\n * @deprecated Deprecated due to potential for misuse. Generally, use `React.useCallback` instead.\n * If you need a callback reference that never changes, consider `useEventCallback`.\n *\n * This hook was intended for creating callbacks which have no dependencies, and therefore never\n * need to change. It works fine if everyone using it is extremely mindful of how closures work,\n * but that's not a safe assumption--so in practice, usage of this hook tends to result in bugs\n * like unintentionally capturing the first value of a prop and not respecting updates (when\n * updates should be respected).\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useConstCallback<T extends (...args: any[]) => any>(callback: T): T {\n  const ref = React.useRef<T>();\n  if (!ref.current) {\n    ref.current = callback;\n  }\n  return ref.current;\n}\n", "import * as React from 'react';\nimport { useConst } from './useConst';\n\nexport type ChangeCallback<\n  TElement extends HTMLElement,\n  TValue,\n  TEvent extends React.SyntheticEvent<TElement> | undefined,\n> = (ev: TEvent, newValue: TValue | undefined) => void;\n\n/**\n * Hook to manage a value that could be either controlled or uncontrolled, such as a checked state or\n * text box string.\n * @param controlledValue - The controlled value passed in the props. This value will always be used if provided,\n * and the internal state will be updated to reflect it.\n * @param defaultUncontrolledValue - Initial value for the internal state in the uncontrolled case.\n * @returns An array of the current value and an updater callback. Like `React.useState`, the updater\n * callback always has the same identity, and it can take either a new value, or a function which\n * is passed the previous value and returns the new value.\n * @see https://reactjs.org/docs/uncontrolled-components.html\n */\nexport function useControllableValue<TValue, TElement extends HTMLElement>(\n  controlledValue: TValue | undefined,\n  defaultUncontrolledValue: TValue | undefined,\n): Readonly<[TValue | undefined, (update: React.SetStateAction<TValue | undefined>) => void]>;\nexport function useControllableValue<\n  TValue,\n  TElement extends HTMLElement,\n  TEvent extends React.SyntheticEvent<TElement> | undefined,\n>(\n  controlledValue: TValue | undefined,\n  defaultUncontrolledValue: TValue | undefined,\n  onChange: ChangeCallback<TElement, TValue, TEvent> | undefined,\n): Readonly<\n  [TValue | undefined, (update: React.SetStateAction<TValue | undefined>, ev?: React.FormEvent<TElement>) => void]\n>;\nexport function useControllableValue<\n  TValue,\n  TElement extends HTMLElement,\n  TEvent extends React.SyntheticEvent<TElement> | undefined,\n>(\n  controlledValue: TValue | undefined,\n  defaultUncontrolledValue: TValue | undefined,\n  onChange?: ChangeCallback<TElement, TValue, TEvent>,\n) {\n  const [value, setValue] = React.useState<TValue | undefined>(defaultUncontrolledValue);\n  const isControlled = useConst<boolean>(controlledValue !== undefined);\n  const currentValue = isControlled ? controlledValue : value;\n\n  // Duplicate the current value and onChange in refs so they're accessible from\n  // setValueOrCallOnChange without creating a new callback every time\n  const valueRef = React.useRef(currentValue);\n  const onChangeRef = React.useRef(onChange);\n  React.useEffect(() => {\n    valueRef.current = currentValue;\n    onChangeRef.current = onChange;\n  });\n\n  // To match the behavior of the setter returned by React.useState, this callback's identity\n  // should never change. This means it MUST NOT directly reference variables that can change.\n  const setValueOrCallOnChange = useConst(() => (update: React.SetStateAction<TValue | undefined>, ev?: TEvent) => {\n    // Assuming here that TValue is not a function, because a controllable value will typically\n    // be something a user can enter as input\n    const newValue = typeof update === 'function' ? (update as Function)(valueRef.current) : update;\n\n    if (onChangeRef.current) {\n      onChangeRef.current(ev!, newValue);\n    }\n\n    if (!isControlled) {\n      setValue(newValue);\n    }\n  });\n\n  return [currentValue, setValueOrCallOnChange] as const;\n}\n", "import * as React from 'react';\nimport { useConst } from './useConst';\nimport { useIsomorphicLayoutEffect } from '@fluentui/utilities';\n\n/**\n * Modified `useCallback` that returns the same function reference every time, but internally calls\n * the most-recently passed callback implementation. Can be useful in situations such as:\n * - Event handler dependencies change too frequently, such as user props which might change on\n *   every render, or volatile values such as useState/useDispatch\n * - Callback must be referenced in a captured context (such as a window event handler or unmount\n *   handler that's registered once) but needs access to the latest props\n *\n * In general, prefer `useCallback` unless you've encountered one of the problems above.\n *\n * https://reactjs.org/docs/hooks-faq.html#how-to-read-an-often-changing-value-from-usecallback\n *\n * @param fn - The callback function that will be used\n * @returns A function which is referentially stable but internally calls the most recently passed callback\n */\nexport function useEventCallback<Args extends unknown[], Return>(fn: (...args: Args) => Return) {\n  const callbackRef = React.useRef<typeof fn>(() => {\n    throw new Error('Cannot call an event handler while rendering');\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    callbackRef.current = fn;\n  }, [fn]);\n\n  // useConst rather than useCallback to ensure the reference is always stable\n  // (useCallback's deps list is an optimization, not a guarantee)\n  return useConst(() => (...args: Args) => {\n    const callback = callbackRef.current;\n    return callback(...args);\n  });\n}\n", "import * as React from 'react';\nimport { useConst } from './useConst';\n\n/**\n * Hook to force update a function component by updating a dummy state.\n */\nexport function useForceUpdate(): () => void {\n  const [, setValue] = React.useState(0);\n  const forceUpdate = useConst(() => () => setValue(value => ++value));\n  return forceUpdate;\n}\n", "import * as React from 'react';\nimport { getId } from '@fluentui/utilities';\n\n/**\n * Hook to generate a unique ID in the global scope (spanning across duplicate copies of the same library).\n *\n * @param prefix - Optional prefix for the ID\n * @param providedId - Optional id provided by a parent component. Defaults to the provided value if present,\n *  without conditioning the hook call\n * @returns The ID\n */\nexport function useId(prefix?: string, providedId?: string): string {\n  // getId should only be called once since it updates the global constant for the next ID value.\n  // (While an extra update isn't likely to cause problems in practice, it's better to avoid it.)\n  const ref = React.useRef<string | undefined>(providedId);\n  if (!ref.current) {\n    ref.current = getId(prefix);\n  }\n  return ref.current;\n}\n", "import * as React from 'react';\n\n/**\n * A Ref function which can be treated like a ref object in that it has an attached\n * current property, which will be updated as the ref is evaluated.\n */\nexport type RefObjectFunction<T> = React.RefObject<T> & ((value: T) => void);\n\n/**\n * React hook to merge multiple React refs (either MutableRefObjects or ref callbacks) into a single ref callback that\n * updates all provided refs\n * @param refs - Refs to collectively update with one ref value.\n * @returns A function with an attached \"current\" prop, so that it can be treated like a RefObject.\n */\nexport function useMergedRefs<T>(...refs: (React.Ref<T> | undefined)[]): RefObjectFunction<T> {\n  const mergedCallback: RefObjectFunction<T> = React.useCallback(\n    (value: T) => {\n      // Update the \"current\" prop hanging on the function.\n      (mergedCallback as unknown as React.MutableRefObject<T>).current = value;\n\n      for (const ref of refs) {\n        if (typeof ref === 'function') {\n          ref(value);\n        } else if (ref) {\n          // work around the immutability of the React.Ref type\n          (ref as unknown as React.MutableRefObject<T>).current = value;\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- already exhaustive\n    [...refs],\n  ) as unknown as RefObjectFunction<T>;\n\n  return mergedCallback;\n}\n", "import * as React from 'react';\n\n/**\n * Hook which asynchronously executes a callback once the component has been mounted.\n *\n * @param callback - Function to call before mount.\n */\nexport const useMount = (callback: () => void) => {\n  const mountRef = React.useRef(callback);\n  mountRef.current = callback;\n  React.useEffect(() => {\n    mountRef.current?.();\n  }, []);\n};\n", "import * as React from 'react';\n\n/**\n * Hook which synchronously executes a callback once the component has been mounted.\n *\n * `WARNING` This should only be used if you need to perform an action after the component has been mounted and\n * before the browser paints. useMountSync will trigger debug warnings in server-rendered scenarios and should be used\n * sparingly.\n *\n * @deprecated Consider to use React.useEffect() or React.useLayoutEffect() directly based on a use case\n *\n * @param callback - Function to call once the component has been mounted.\n */\nexport const useMountSync = (callback: () => void) => {\n  const mountRef = React.useRef(callback);\n  mountRef.current = callback;\n  // eslint-disable-next-line no-restricted-properties\n  React.useLayoutEffect(() => {\n    mountRef.current?.();\n  }, []);\n};\n", "import { on } from '@fluentui/utilities';\nimport * as React from 'react';\n\n/**\n * Hook to attach an event handler on mount and handle cleanup.\n * @param element - Element (or ref to an element) to attach the event handler to\n * @param eventName - The event to attach a handler for\n * @param callback - The handler for the event\n * @param useCapture - Whether or not to attach the handler for the capture phase\n */\nexport function useOnEvent<TElement extends Element, TEvent extends Event>(\n  element: React.RefObject<TElement | undefined | null> | TElement | Window | Document | undefined | null,\n  eventName: string,\n  callback: (ev: TEvent) => void,\n  useCapture?: boolean,\n) {\n  // Use a ref for the callback to prevent repeatedly attaching/unattaching callbacks that are unstable across renders\n  const callbackRef = React.useRef(callback);\n  callbackRef.current = callback;\n\n  React.useEffect(() => {\n    const actualElement = element && 'current' in element ? element.current : element;\n    if (!actualElement) {\n      return;\n    }\n\n    const dispose = on(actualElement, eventName, (ev: TEvent) => callbackRef.current(ev), useCapture);\n    return dispose;\n  }, [element, eventName, useCapture]);\n}\n", "import { useRef, useEffect } from 'react';\n\n/**\n * Hook keeping track of a given value from a previous execution of the component the Hook is used in.\n *\n * See [React Hooks FAQ](https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state)\n */\nexport function usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T | undefined>();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n", "import * as React from 'react';\n\n/**\n * A callback ref function that also has a .current member for the ref's current value.\n */\nexport type RefCallback<T> = ((value: T | null) => void) & React.RefObject<T>;\n\n/**\n * Creates a ref, and calls a callback whenever the ref changes to a non-null value. The callback can optionally return\n * a cleanup function that'll be called before the value changes, and when the ref is unmounted.\n *\n * This can be used to work around a limitation that useEffect cannot depend on `ref.current` (see\n * https://github.com/facebook/react/issues/14387#issuecomment-503616820).\n *\n * Usage example:\n * ```ts\n * const myRef = useRefEffect<HTMLElement>(element => {\n *  ...\n *  return () => { ... cleanup ... };\n * });\n * ```\n * ```jsx\n * <div ref={myRef} />\n * ```\n *\n * @param callback - Called whenever the ref's value changes to non-null. Can optionally return a cleanup function.\n * @param initial - (Optional) The initial value for the ref.\n *\n * @returns A function that should be called to set the ref's value. The object also has a `.current` member that can be\n * used to access the ref's value (like a normal RefObject). It can be hooked up to an element's `ref` property.\n */\nexport function useRefEffect<T>(callback: (value: T) => (() => void) | void, initial: T | null = null): RefCallback<T> {\n  type RefData = {\n    ref: ((value: T | null) => void) & React.MutableRefObject<T | null>;\n    callback: (value: T) => (() => void) | void;\n    cleanup?: (() => void) | void;\n  };\n\n  const createRefCallback = () => {\n    const refCallback = (value: T | null) => {\n      if (data.ref.current !== value) {\n        if (data.cleanup) {\n          data.cleanup();\n          data.cleanup = undefined;\n        }\n\n        data.ref.current = value;\n\n        if (value !== null) {\n          data.cleanup = data.callback(value);\n        }\n      }\n    };\n\n    refCallback.current = initial;\n    return refCallback;\n  };\n\n  const data = React.useRef<RefData>({\n    ref: createRefCallback(),\n    callback,\n  }).current;\n\n  data.callback = callback;\n\n  return data.ref;\n}\n", "import * as React from 'react';\nimport { useConst } from './useConst';\n\nexport type UseSetIntervalReturnType = {\n  setInterval: (callback: () => void, duration: number) => number;\n  clearInterval: (id: number) => void;\n};\n\n/**\n *  Returns a wrapper function for `setInterval` which automatically handles disposal.\n */\nexport const useSetInterval = (): UseSetIntervalReturnType => {\n  const intervalIds = useConst<Record<number, number>>({});\n\n  React.useEffect(\n    () => () => {\n      for (const id of Object.keys(intervalIds)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        clearInterval(id as any);\n      }\n    },\n    // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that\n    [intervalIds],\n  );\n\n  return useConst({\n    setInterval: (func: () => void, duration: number): number => {\n      const id = setInterval(func, duration) as unknown as number;\n\n      intervalIds[id] = 1;\n\n      return id;\n    },\n\n    clearInterval: (id: number): void => {\n      delete intervalIds[id];\n      clearInterval(id);\n    },\n  });\n};\n", "import * as React from 'react';\nimport { useConst } from './useConst';\n\nexport type UseSetTimeoutReturnType = {\n  setTimeout: (callback: () => void, duration: number) => number;\n  clearTimeout: (id: number) => void;\n};\n\n/**\n *  Returns a wrapper function for `setTimeout` which automatically handles disposal.\n */\nexport const useSetTimeout = (): UseSetTimeoutReturnType => {\n  const timeoutIds = useConst<Record<number, number>>({});\n\n  // Cleanup function.\n  React.useEffect(\n    () => () => {\n      for (const id of Object.keys(timeoutIds)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        clearTimeout(id as any);\n      }\n    },\n    // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that\n    [timeoutIds],\n  );\n\n  // Return wrapper which will auto cleanup.\n  return useConst({\n    setTimeout: (func: () => void, duration: number): number => {\n      const id = setTimeout(func, duration) as unknown as number;\n\n      timeoutIds[id] = 1;\n\n      return id;\n    },\n\n    clearTimeout: (id: number): void => {\n      delete timeoutIds[id];\n      clearTimeout(id);\n    },\n  });\n};\n", "import { getDocument, Rectangle } from '@fluentui/utilities';\nimport * as React from 'react';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport type { Point } from '@fluentui/utilities';\n\nexport type Target = Element | string | MouseEvent | Point | Rectangle | null | React.RefObject<Element>;\n\n/**\n * Hook to calculate and cache the target element specified by the given target attribute,\n * as well as the target element's (or host element's) parent window\n * @param target- Target selector passed to the component as a property, describing the element that\n * the callout should target\n * @param hostElement- The callout's host element, used for determining the parent window.\n */\nexport function useTarget<TElement extends HTMLElement = HTMLElement>(\n  target: Target | undefined,\n  hostElement?: React.RefObject<TElement | null>,\n): Readonly<[React.RefObject<Element | MouseEvent | Point | Rectangle | null>, Window | undefined]> {\n  const previousTargetProp = React.useRef<\n    Element | string | MouseEvent | Point | Rectangle | React.RefObject<Element> | null | undefined\n  >();\n\n  const targetRef = React.useRef<Element | MouseEvent | Point | Rectangle | null>(null);\n  /**\n   * Stores an instance of Window, used to check\n   * for server side rendering and if focus was lost.\n   */\n  const targetWindow = useWindow();\n\n  // If the target element changed, find the new one. If we are tracking\n  // target with class name, always find element because we do not know if\n  // fabric has rendered a new element and disposed the old element.\n  if (!target || target !== previousTargetProp.current || typeof target === 'string') {\n    const currentElement = hostElement?.current;\n    if (target) {\n      if (typeof target === 'string') {\n        const currentDoc: Document = getDocument(currentElement)!;\n        targetRef.current = currentDoc ? currentDoc.querySelector(target) : null;\n      } else if ('stopPropagation' in target) {\n        targetRef.current = target;\n      } else if ('getBoundingClientRect' in target) {\n        targetRef.current = target;\n      } else if ('current' in target) {\n        targetRef.current = target.current;\n      } else {\n        targetRef.current = target;\n      }\n    }\n    previousTargetProp.current = target;\n  }\n\n  return [targetRef, targetWindow] as const;\n}\n", "import * as React from 'react';\n\n/**\n * Props for the WindowProvider component.\n */\nexport type WindowProviderProps = {\n  /**\n   * Provide the active window.\n   */\n  window: Window | undefined;\n  children?: React.ReactNode;\n};\n\n/**\n * Context for providing the window.\n */\n// eslint-disable-next-line @fluentui/no-context-default-value\nexport const WindowContext = React.createContext<WindowProviderProps>({\n  window: typeof window === 'object' ? window : undefined,\n});\n\n/**\n * Hook to access the window object. This can be overridden contextually using the `WindowProvider`.\n */\nexport const useWindow = (): Window | undefined => React.useContext(WindowContext).window;\n\n/**\n * Hook to access the document object. This can be overridden contextually using the `WindowProvider`.\n */\nexport const useDocument = (): Document | undefined => React.useContext(WindowContext).window?.document;\n\n/**\n * Component to provide the window object contextually. This is useful when rendering content to an element\n * contained within a child window or iframe element, where event handlers and styling must be projected\n * to an alternative window or document.\n */\nexport const WindowProvider: React.FunctionComponent<WindowProviderProps> = props => {\n  return <WindowContext.Provider value={props}>{props.children}</WindowContext.Provider>;\n};\n", "// Do not modify this file; it is generated as part of publish.\n// The checked in version is a placeholder only and will not be updated.\nimport { setVersion } from '@fluentui/set-version';\nsetVersion('@fluentui/react-window-provider', '2.2.15');", "import * as React from 'react';\n\n/**\n * Hook which synchronously executes a callback when the component is about to unmount.\n *\n * @param callback - Function to call during unmount.\n */\nexport const useUnmount = (callback: () => void) => {\n  const unmountRef = React.useRef(callback);\n  unmountRef.current = callback;\n  React.useEffect(\n    () => () => {\n      unmountRef.current?.();\n    },\n    [],\n  );\n};\n", "import * as React from 'react';\nimport {\n  warn,\n  warnControlledUsage,\n  warnConditionallyRequiredProps,\n  warnDeprecations,\n  warnMutuallyExclusive,\n} from '@fluentui/utilities';\nimport { usePrevious } from './usePrevious';\nimport { useConst } from './useConst';\nimport type { ISettingsMap, IWarnControlledUsageParams } from '@fluentui/utilities';\n\nexport interface IWarningOptions<P> {\n  /** Name of the component */\n  name: string;\n\n  /** Current component props */\n  props: P;\n\n  /** Generic messages */\n  other?: string[];\n\n  /** Warns when props are required if a condition is met */\n  conditionallyRequired?: {\n    /** Props required when the condition is met */\n    requiredProps: string[];\n    /** Name of the prop that the condition is based on */\n    conditionalPropName: string;\n    /** Whether the condition is met */\n    condition: boolean;\n  }[];\n\n  /**\n   * Warns when deprecated props are being used. Each key is a prop name and each value is\n   * either undefined or a replacement prop name.\n   */\n  deprecations?: ISettingsMap<P>;\n\n  /**\n   * Warns when two props which are mutually exclusive are both being used.\n   * The key is one prop name and the value is the other.\n   */\n  mutuallyExclusive?: ISettingsMap<P>;\n\n  /**\n   * Check for and warn on the following error conditions with a form component:\n   * - A value prop is provided (indicated it's being used as controlled) without a change handler,\n   *    and the component is not read-only\n   * - Both the value and defaultValue props are provided\n   * - The component is attempting to switch between controlled and uncontrolled\n   *\n   * The messages mimic the warnings React gives for these error conditions on input elements.\n   * The warning will only be displayed once per component instance.\n   */\n  controlledUsage?: Pick<\n    IWarnControlledUsageParams<P>,\n    'valueProp' | 'defaultValueProp' | 'onChangeProp' | 'readOnlyProp'\n  >;\n}\n\nlet warningId = 0;\n\n/**\n * Only in development mode, display console warnings when certain conditions are met.\n * Note that all warnings except `controlledUsage` will only be shown on first render\n * (new `controlledUsage` warnings may be shown later due to prop changes).\n */\nexport function useWarnings<P>(options: IWarningOptions<P>) {\n  if (process.env.NODE_ENV !== 'production') {\n    const {\n      name,\n      props,\n      other = [],\n      conditionallyRequired,\n      deprecations,\n      mutuallyExclusive,\n      controlledUsage,\n    } = options;\n\n    /* eslint-disable react-hooks/rules-of-hooks -- build-time conditional */\n    const hasWarnedRef = React.useRef(false);\n    const componentId = useConst(() => `useWarnings_${warningId++}`);\n    const oldProps = usePrevious(props);\n    /* eslint-enable react-hooks/rules-of-hooks */\n\n    // Warn synchronously (not in useEffect) on first render to make debugging easier.\n    if (!hasWarnedRef.current) {\n      hasWarnedRef.current = true;\n\n      for (const warning of other) {\n        warn(warning);\n      }\n\n      if (conditionallyRequired) {\n        for (const req of conditionallyRequired) {\n          warnConditionallyRequiredProps(name, props, req.requiredProps, req.conditionalPropName, req.condition);\n        }\n      }\n\n      deprecations && warnDeprecations(name, props, deprecations);\n\n      mutuallyExclusive && warnMutuallyExclusive(name, props, mutuallyExclusive);\n    }\n\n    // Controlled usage warnings may be displayed on either first or subsequent renders due to\n    // prop changes. Note that it's safe to run this synchronously (not in useEffect) even in\n    // concurrent mode because `warnControlledUsage` internally tracks which warnings have been\n    // displayed for each component instance (so nothing will be displayed twice).\n    controlledUsage && warnControlledUsage({ ...controlledUsage, componentId, props, componentName: name, oldProps });\n  }\n}\n", "import { AnimationClassNames, getGlobalClassNames } from '../../Styling';\nimport { getWindow } from '../../Utilities';\nimport type { IStyle } from '../../Styling';\nimport type { IImageStyleProps, IImageStyles } from './Image.types';\n\nconst GlobalClassNames = {\n  root: 'ms-Image',\n  rootMaximizeFrame: 'ms-Image--maximizeFrame',\n  image: 'ms-Image-image',\n  imageCenter: 'ms-Image-image--center',\n  imageContain: 'ms-Image-image--contain',\n  imageCover: 'ms-Image-image--cover',\n  imageCenterContain: 'ms-Image-image--centerContain',\n  imageCenterCover: 'ms-Image-image--centerCover',\n  imageNone: 'ms-Image-image--none',\n  imageLandscape: 'ms-Image-image--landscape',\n  imagePortrait: 'ms-Image-image--portrait',\n};\n\nexport const getStyles = (props: IImageStyleProps): IImageStyles => {\n  const {\n    className,\n    width,\n    height,\n    maximizeFrame,\n    isLoaded,\n    shouldFadeIn,\n    shouldStartVisible,\n    isLandscape,\n    isCenter,\n    isContain,\n    isCover,\n    isCenterContain,\n    isCenterCover,\n    isNone,\n    isError,\n    isNotImageFit,\n    theme,\n  } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const ImageFitStyles: IStyle = {\n    position: 'absolute',\n    left: '50% /* @noflip */',\n    top: '50%',\n    transform: 'translate(-50%,-50%)', // @todo test RTL renders transform: translate(50%,-50%);\n  };\n\n  // Cut the mustard using msMaxTouchPoints to detect IE11 which does not support CSS object-fit\n  const window: Window | undefined = getWindow();\n  const supportsObjectFit: boolean =\n    window !== undefined &&\n    // eslint-disable-next-line @fluentui/max-len\n    // cast needed as vendor prefixed `msMaxTouchPoints` api is no longer part of TS lib declaration - introduced with TS 4.4\n    (window.navigator as { msMaxTouchPoints?: Window['navigator']['maxTouchPoints'] }).msMaxTouchPoints === undefined;\n  const fallbackObjectFitStyles =\n    (isContain && isLandscape) || (isCover && !isLandscape)\n      ? { width: '100%', height: 'auto' }\n      : { width: 'auto', height: '100%' };\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.medium,\n      {\n        overflow: 'hidden',\n      },\n      maximizeFrame && [\n        classNames.rootMaximizeFrame,\n        {\n          height: '100%',\n          width: '100%',\n        },\n      ],\n      isLoaded && shouldFadeIn && !shouldStartVisible && AnimationClassNames.fadeIn400,\n      (isCenter || isContain || isCover || isCenterContain || isCenterCover) && {\n        position: 'relative',\n      },\n      className,\n    ],\n    image: [\n      classNames.image,\n      {\n        display: 'block',\n        opacity: 0,\n      },\n      isLoaded && [\n        'is-loaded',\n        {\n          opacity: 1,\n        },\n      ],\n      isCenter && [classNames.imageCenter, ImageFitStyles],\n      isContain && [\n        classNames.imageContain,\n        supportsObjectFit && {\n          width: '100%',\n          height: '100%',\n          objectFit: 'contain',\n        },\n        !supportsObjectFit && fallbackObjectFitStyles,\n        !supportsObjectFit && ImageFitStyles,\n      ],\n      isCover && [\n        classNames.imageCover,\n        supportsObjectFit && {\n          width: '100%',\n          height: '100%',\n          objectFit: 'cover',\n        },\n        !supportsObjectFit && fallbackObjectFitStyles,\n        !supportsObjectFit && ImageFitStyles,\n      ],\n      isCenterContain && [\n        classNames.imageCenterContain,\n        isLandscape && {\n          maxWidth: '100%',\n        },\n        !isLandscape && {\n          maxHeight: '100%',\n        },\n        ImageFitStyles,\n      ],\n      isCenterCover && [\n        classNames.imageCenterCover,\n        isLandscape && {\n          maxHeight: '100%',\n        },\n        !isLandscape && {\n          maxWidth: '100%',\n        },\n        ImageFitStyles,\n      ],\n      isNone && [\n        classNames.imageNone,\n        {\n          width: 'auto',\n          height: 'auto',\n        },\n      ],\n      isNotImageFit && [\n        !!width &&\n          !height && {\n            height: 'auto',\n            width: '100%',\n          },\n        !width &&\n          !!height && {\n            height: '100%',\n            width: 'auto',\n          },\n        !!width &&\n          !!height && {\n            height: '100%',\n            width: '100%',\n          },\n      ],\n      isLandscape && classNames.imageLandscape,\n      !isLandscape && classNames.imagePortrait,\n      !isLoaded && 'is-notLoaded',\n      shouldFadeIn && 'is-fadeIn',\n      isError && 'is-error',\n    ],\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ImageBase } from './Image.base';\nimport { getStyles } from './Image.styles';\nimport type { IImageProps, IImageStyleProps, IImageStyles } from './Image.types';\n\nexport const Image: React.FunctionComponent<IImageProps> = styled<IImageProps, IImageStyleProps, IImageStyles>(\n  ImageBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Image',\n  },\n  true,\n);\nImage.displayName = 'Image';\n", "import * as React from 'react';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport { css, getNativeProps, htmlElementProperties, memoizeFunction } from '../../Utilities';\nimport { getIcon } from '../../Styling';\nimport type { IFontIconProps } from './Icon.types';\nimport type { IIconRecord, IIconSubsetRecord } from '../../Styling';\n\nexport interface IIconContent {\n  children?: string | JSX.Element;\n  iconClassName?: string;\n  fontFamily?: string;\n  mergeImageProps?: boolean;\n}\n\nexport const getIconContent = memoizeFunction(\n  (iconName?: string): IIconContent | null => {\n    const { code, subset }: Pick<IIconRecord, 'code'> & { subset: Partial<IIconSubsetRecord> } = getIcon(iconName) || {\n      subset: {},\n      code: undefined,\n    };\n\n    if (!code) {\n      return null;\n    }\n\n    return {\n      children: code,\n      iconClassName: subset.className,\n      fontFamily: subset.fontFace && subset.fontFace.fontFamily,\n      mergeImageProps: subset.mergeImageProps,\n    };\n  },\n  undefined,\n  true /*ignoreNullOrUndefinedResult */,\n);\n\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\nexport const FontIcon: React.FunctionComponent<IFontIconProps> = props => {\n  const { iconName, className, style = {} } = props;\n  const iconContent = getIconContent(iconName) || {};\n  const { iconClassName, children, fontFamily, mergeImageProps } = iconContent;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLElement>>(props, htmlElementProperties);\n  const accessibleName = props['aria-label'] || props.title;\n  const containerProps =\n    props['aria-label'] || props['aria-labelledby'] || props.title\n      ? {\n          role: mergeImageProps ? undefined : 'img',\n        }\n      : {\n          'aria-hidden': true,\n        };\n\n  let finalChildren = children;\n\n  if (mergeImageProps) {\n    if (typeof children === 'object' && typeof children.props === 'object' && accessibleName) {\n      finalChildren = React.cloneElement(children, { alt: accessibleName });\n    }\n  }\n\n  return (\n    <i\n      data-icon-name={iconName}\n      {...containerProps}\n      {...nativeProps}\n      {...(mergeImageProps\n        ? {\n            title: undefined,\n            'aria-label': undefined,\n          }\n        : {})}\n      className={css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className)}\n      // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles\n      // https://github.com/microsoft/fluentui/issues/10449\n      style={{ fontFamily, ...style }}\n    >\n      {finalChildren}\n    </i>\n  );\n};\n\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\nexport const getFontIcon = memoizeFunction((iconName: string, className?: string, ariaLabel?: string) => {\n  return FontIcon({ iconName, className, 'aria-label': ariaLabel });\n});\n", "import { mergeStyleSets } from '../../Styling';\nimport type { IIconStyleProps, IIconStyles } from './Icon.types';\n\n/** Class names used in themeable and non-themeable Icon components */\nexport const classNames = mergeStyleSets({\n  root: {\n    display: 'inline-block',\n  },\n  placeholder: [\n    'ms-Icon-placeHolder',\n    {\n      width: '1em',\n    },\n  ],\n  image: [\n    'ms-Icon-imageContainer',\n    {\n      overflow: 'hidden',\n    },\n  ],\n});\n/** Class name used only in non-themeable Icon components */\nexport const MS_ICON = 'ms-Icon';\n\nexport const getStyles = (props: IIconStyleProps): IIconStyles => {\n  const { className, iconClassName, isPlaceholder, isImage, styles } = props;\n\n  return {\n    root: [\n      isPlaceholder && classNames.placeholder,\n      classNames.root,\n      isImage && classNames.image,\n      iconClassName,\n      className,\n      styles && styles.root,\n      // eslint-disable-next-line deprecation/deprecation\n      styles && styles.imageContainer,\n    ],\n  };\n};\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { IconBase } from './Icon.base';\nimport { getStyles } from './Icon.styles';\nimport type { IIconProps, IIconStyleProps, IIconStyles } from './Icon.types';\n\n/**\n * Legacy Icon component which can be targeted by customization. It's recommended to use `FontIcon`\n * or `ImageIcon` instead, especially in scenarios where rendering performance is important.\n * {@docCategory Icon}\n */\nexport const Icon: React.FunctionComponent<IIconProps> = styled<IIconProps, IIconStyleProps, IIconStyles>(\n  IconBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Icon',\n  },\n  true,\n);\nIcon.displayName = 'Icon';\n", "import * as React from 'react';\nimport { Image } from '../Image/Image';\nimport { css, getNativeProps, htmlElementProperties } from '../../Utilities';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport type { IImageIconProps } from './Icon.types';\n\n/**\n * Fast icon component which only supports images (not font glyphs) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\nexport const ImageIcon: React.FunctionComponent<IImageIconProps> = props => {\n  const { className, imageProps } = props;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(props, htmlElementProperties, [\n    'aria-label',\n    'aria-labelledby',\n    'title',\n    'aria-describedby',\n  ]);\n  const altText = imageProps.alt || props['aria-label'];\n  const hasName =\n    altText ||\n    props['aria-labelledby'] ||\n    props.title ||\n    imageProps['aria-label'] ||\n    imageProps['aria-labelledby'] ||\n    imageProps.title;\n\n  // move naming or describing attributes from the container (where they are invalid) to the image\n  const imageNameProps = {\n    'aria-labelledby': props['aria-labelledby'],\n    'aria-describedby': props['aria-describedby'],\n    title: props.title,\n  };\n\n  const containerProps = hasName\n    ? {}\n    : {\n        'aria-hidden': true,\n      };\n\n  return (\n    <div {...containerProps} {...nativeProps} className={css(MS_ICON, classNames.root, classNames.image, className)}>\n      <Image {...imageNameProps} {...imageProps} alt={hasName ? altText : ''} />\n    </div>\n  );\n};\n", "import {\n  AnimationClassNames,\n  getFocusStyle,\n  getGlobalClassNames,\n  getInputFocusStyle,\n  HighContrastSelector,\n  normalize,\n  getPlaceholderStyles,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport type { IStyle } from '../../Styling';\nimport type { ILabelStyles, ILabelStyleProps } from '../../Label';\nimport type { ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\nimport type { IStyleFunctionOrObject } from '@fluentui/utilities';\n\nconst globalClassNames = {\n  root: 'ms-TextField',\n  description: 'ms-TextField-description',\n  errorMessage: 'ms-TextField-errorMessage',\n  field: 'ms-TextField-field',\n  fieldGroup: 'ms-TextField-fieldGroup',\n  prefix: 'ms-TextField-prefix',\n  suffix: 'ms-TextField-suffix',\n  wrapper: 'ms-TextField-wrapper',\n  revealButton: 'ms-TextField-reveal',\n\n  multiline: 'ms-TextField--multiline',\n  borderless: 'ms-TextField--borderless',\n  underlined: 'ms-TextField--underlined',\n  unresizable: 'ms-TextField--unresizable',\n\n  required: 'is-required',\n  disabled: 'is-disabled',\n  active: 'is-active',\n};\n\nfunction getLabelStyles(props: ITextFieldStyleProps): IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles> {\n  const { underlined, disabled, focused, theme } = props;\n  const { palette, fonts } = theme;\n\n  return () => ({\n    root: [\n      underlined &&\n        disabled && {\n          color: palette.neutralTertiary,\n        },\n      underlined && {\n        fontSize: fonts.medium.fontSize,\n        marginRight: 8,\n        paddingLeft: 12,\n        paddingRight: 0,\n        lineHeight: '22px',\n        height: 32,\n      },\n      underlined &&\n        focused && {\n          selectors: {\n            [HighContrastSelector]: {\n              height: 31, // -1px to prevent jumpiness in HC with the increased border-width to 2px\n            },\n          },\n        },\n    ],\n  });\n}\n\nexport function getStyles(props: ITextFieldStyleProps): ITextFieldStyles {\n  const {\n    theme,\n    className,\n    disabled,\n    focused,\n    required,\n    multiline,\n    hasLabel,\n    borderless,\n    underlined,\n    hasIcon,\n    resizable,\n    hasErrorMessage,\n    inputClassName,\n    autoAdjustHeight,\n    hasRevealButton,\n  } = props;\n\n  const { semanticColors, effects, fonts } = theme;\n\n  const classNames = getGlobalClassNames(globalClassNames, theme);\n\n  const fieldPrefixSuffix: IStyle = {\n    // Suffix/Prefix are not editable so the disabled slot perfectly fits.\n    background: semanticColors.disabledBackground,\n    color: !disabled ? semanticColors.inputPlaceholderText : semanticColors.disabledText,\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 10px',\n    lineHeight: 1,\n    whiteSpace: 'nowrap',\n    flexShrink: 0,\n    selectors: {\n      [HighContrastSelector]: {\n        background: 'Window',\n        color: disabled ? 'GrayText' : 'WindowText',\n      },\n    },\n  };\n\n  // placeholder style constants\n  const placeholderStyles: IStyle = [\n    {\n      color: semanticColors.inputPlaceholderText,\n      opacity: 1,\n      selectors: {\n        [HighContrastSelector]: {\n          color: 'GrayText',\n        },\n      },\n    },\n  ];\n\n  const disabledPlaceholderStyles: IStyle = {\n    color: semanticColors.disabledText,\n    selectors: {\n      [HighContrastSelector]: {\n        color: 'GrayText',\n      },\n    },\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      required && classNames.required,\n      disabled && classNames.disabled,\n      focused && classNames.active,\n      multiline && classNames.multiline,\n      borderless && classNames.borderless,\n      underlined && classNames.underlined,\n      normalize,\n      {\n        position: 'relative',\n      },\n      className,\n    ],\n    wrapper: [\n      classNames.wrapper,\n\n      underlined && [\n        {\n          display: 'flex',\n          borderBottom: `1px solid ${!hasErrorMessage ? semanticColors.inputBorder : semanticColors.errorText}`,\n          width: '100%',\n        },\n        disabled && {\n          borderBottomColor: semanticColors.disabledBackground,\n          selectors: {\n            [HighContrastSelector]: {\n              borderColor: 'GrayText',\n              ...getHighContrastNoAdjustStyle(),\n            },\n          },\n        },\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderBottomColor: !hasErrorMessage ? semanticColors.inputBorderHovered : semanticColors.errorText,\n              selectors: {\n                [HighContrastSelector]: {\n                  borderBottomColor: 'Highlight',\n                  ...getHighContrastNoAdjustStyle(),\n                },\n              },\n            },\n          },\n        },\n        focused && [\n          {\n            position: 'relative',\n          },\n          getInputFocusStyle(\n            !hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText,\n            0,\n            'borderBottom',\n          ),\n        ],\n      ],\n    ],\n    fieldGroup: [\n      classNames.fieldGroup,\n      normalize,\n      {\n        border: `1px solid ${semanticColors.inputBorder}`,\n        borderRadius: effects.roundedCorner2,\n        background: semanticColors.inputBackground,\n        cursor: 'text',\n        height: 32,\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'stretch',\n        position: 'relative',\n      },\n      multiline && {\n        minHeight: '60px',\n        height: 'auto',\n        display: 'flex',\n      },\n\n      !focused &&\n        !disabled && {\n          selectors: {\n            ':hover': {\n              borderColor: semanticColors.inputBorderHovered,\n              selectors: {\n                [HighContrastSelector]: {\n                  borderColor: 'Highlight',\n                  ...getHighContrastNoAdjustStyle(),\n                },\n              },\n            },\n          },\n        },\n\n      focused &&\n        !underlined &&\n        getInputFocusStyle(\n          !hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText,\n          effects.roundedCorner2,\n        ),\n      disabled && {\n        borderColor: semanticColors.disabledBackground,\n        selectors: {\n          [HighContrastSelector]: {\n            borderColor: 'GrayText',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n\n        cursor: 'default',\n      },\n      borderless && {\n        border: 'none',\n      },\n      borderless &&\n        focused && {\n          border: 'none',\n          selectors: {\n            ':after': {\n              border: 'none',\n            },\n          },\n        },\n      underlined && {\n        flex: '1 1 0px',\n        border: 'none',\n        textAlign: 'left',\n      },\n      underlined &&\n        disabled && {\n          backgroundColor: 'transparent',\n        },\n\n      hasErrorMessage &&\n        !underlined && {\n          borderColor: semanticColors.errorText,\n          selectors: {\n            '&:hover': {\n              borderColor: semanticColors.errorText,\n            },\n          },\n        },\n      !hasLabel &&\n        required && {\n          selectors: {\n            ':before': {\n              content: `'*'`,\n              color: semanticColors.errorText,\n              position: 'absolute',\n              top: -5,\n              right: -10,\n            },\n            [HighContrastSelector]: {\n              selectors: {\n                ':before': {\n                  color: 'WindowText',\n                  right: -14, // moving the * 4 pixel to right to alleviate border clipping in HC mode.\n                },\n              },\n            },\n          },\n        },\n    ],\n    field: [\n      fonts.medium,\n      classNames.field,\n      normalize,\n      {\n        borderRadius: 0,\n        border: 'none',\n        background: 'none',\n        backgroundColor: 'transparent',\n        color: semanticColors.inputText,\n        padding: '0 8px',\n        width: '100%',\n        minWidth: 0,\n        textOverflow: 'ellipsis',\n        outline: 0,\n        selectors: {\n          '&:active, &:focus, &:hover': { outline: 0 },\n          '::-ms-clear': {\n            display: 'none',\n          },\n          [HighContrastSelector]: {\n            background: 'Window',\n            color: disabled ? 'GrayText' : 'WindowText',\n          },\n        },\n      },\n      getPlaceholderStyles(placeholderStyles),\n      multiline &&\n        !resizable && [\n          classNames.unresizable,\n          {\n            resize: 'none',\n          },\n        ],\n      multiline && {\n        minHeight: 'inherit',\n        lineHeight: 17,\n        flexGrow: 1,\n        paddingTop: 6,\n        paddingBottom: 6,\n        overflow: 'auto',\n        width: '100%',\n      },\n      multiline &&\n        autoAdjustHeight && {\n          overflow: 'hidden',\n        },\n      hasIcon &&\n        !hasRevealButton && {\n          paddingRight: 24,\n        },\n      multiline &&\n        hasIcon && {\n          paddingRight: 40,\n        },\n      disabled && [\n        {\n          backgroundColor: semanticColors.disabledBackground,\n          color: semanticColors.disabledText,\n          borderColor: semanticColors.disabledBackground,\n        },\n        getPlaceholderStyles(disabledPlaceholderStyles),\n      ],\n      underlined && {\n        textAlign: 'left',\n      },\n      focused &&\n        !borderless && {\n          selectors: {\n            [HighContrastSelector]: {\n              paddingLeft: 11,\n              paddingRight: 11,\n            },\n          },\n        },\n      focused &&\n        multiline &&\n        !borderless && {\n          selectors: {\n            [HighContrastSelector]: {\n              paddingTop: 4, // take into consideration the 2px increased border-width (not when borderless).\n            },\n          },\n        },\n      inputClassName,\n    ],\n    icon: [\n      multiline && {\n        paddingRight: 24,\n        alignItems: 'flex-end',\n      },\n      {\n        pointerEvents: 'none',\n        position: 'absolute',\n        bottom: 6,\n        right: 8,\n        top: 'auto',\n        fontSize: IconFontSizes.medium,\n        lineHeight: 18,\n      },\n      disabled && {\n        color: semanticColors.disabledText,\n      },\n    ],\n    description: [\n      classNames.description,\n      {\n        color: semanticColors.bodySubtext,\n        fontSize: fonts.xSmall.fontSize,\n      },\n    ],\n    errorMessage: [\n      classNames.errorMessage,\n      AnimationClassNames.slideDownIn20,\n      fonts.small,\n      {\n        color: semanticColors.errorText,\n        margin: 0,\n        paddingTop: 5,\n        display: 'flex',\n        alignItems: 'center',\n      },\n    ],\n    prefix: [classNames.prefix, fieldPrefixSuffix],\n    suffix: [classNames.suffix, fieldPrefixSuffix],\n    revealButton: [\n      classNames.revealButton,\n      'ms-Button',\n      'ms-Button--icon',\n      getFocusStyle(theme, { inset: 1 }),\n      {\n        height: 30,\n        width: 32,\n        border: 'none',\n        padding: '0px 4px',\n        backgroundColor: 'transparent',\n        color: semanticColors.link,\n        selectors: {\n          ':hover': {\n            outline: 0,\n            color: semanticColors.primaryButtonBackgroundHovered,\n            backgroundColor: semanticColors.buttonBackgroundHovered,\n            selectors: {\n              [HighContrastSelector]: {\n                borderColor: 'Highlight',\n                color: 'Highlight',\n              },\n            },\n          },\n          ':focus': { outline: 0 },\n        },\n      },\n      hasIcon && {\n        marginRight: 28,\n      },\n    ],\n    revealSpan: {\n      display: 'flex',\n      height: '100%',\n      alignItems: 'center',\n    },\n    revealIcon: {\n      margin: '0px 4px',\n      pointerEvents: 'none',\n      bottom: 6,\n      right: 8,\n      top: 'auto',\n      fontSize: IconFontSizes.medium,\n      lineHeight: 18,\n    },\n    subComponentStyles: {\n      label: getLabelStyles(props),\n    },\n  };\n}\n", "import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { TextFieldBase } from './TextField.base';\nimport { getStyles } from './TextField.styles';\nimport type { ITextFieldProps, ITextFieldStyles, ITextFieldStyleProps } from './TextField.types';\n\nexport const TextField: React.FunctionComponent<ITextFieldProps> = styled<\n  ITextFieldProps,\n  ITextFieldStyleProps,\n  ITextFieldStyles\n>(TextFieldBase, getStyles, undefined, {\n  scope: 'TextField',\n});\n\nexport type { ITextField } from './TextField.types';\n", "import * as React from 'react';\nimport { TextField } from '../TextField';\nimport { KeyCodes } from '../../../Utilities';\nimport {\n  clearNext,\n  clearPrev,\n  clearRange,\n  DEFAULT_MASK_FORMAT_CHARS,\n  getLeftFormatIndex,\n  getMaskDisplay,\n  getRightFormatIndex,\n  insertString,\n  parseMask,\n} from './inputMask';\nimport { useConst, useIsomorphicLayoutEffect } from '@fluentui/react-hooks';\nimport type { IMaskedTextFieldProps, IMaskedTextField } from '../TextField.types';\nimport type { IRefObject } from '../../../Utilities';\nimport type { IMaskValue } from './inputMask';\n\ninterface IMaskedTextFieldInternalState {\n  maskCharData: IMaskValue[];\n  isFocused: boolean;\n  moveCursorOnMouseUp: boolean;\n  changeSelectionData: {\n    changeType: 'default' | 'backspace' | 'delete' | 'textPasted';\n    selectionStart: number;\n    selectionEnd: number;\n  } | null;\n}\n\nconst COMPONENT_NAME = 'MaskedTextField';\n\nconst useComponentRef = (\n  componentRef: IRefObject<IMaskedTextField> | undefined,\n  internalState: IMaskedTextFieldInternalState,\n  textField: React.RefObject<IMaskedTextField>,\n) => {\n  React.useImperativeHandle(\n    componentRef,\n    (): IMaskedTextField => ({\n      get value() {\n        let value = '';\n\n        for (let i = 0; i < internalState.maskCharData.length; i++) {\n          if (!internalState.maskCharData[i].value) {\n            return undefined;\n          }\n          value += internalState.maskCharData[i].value;\n        }\n        return value;\n      },\n\n      get selectionStart(): number | null {\n        return textField.current && textField.current.selectionStart !== null ? textField.current.selectionStart : -1;\n      },\n\n      get selectionEnd(): number | null {\n        return textField.current && textField.current.selectionEnd ? textField.current.selectionEnd : -1;\n      },\n\n      focus(): void {\n        textField.current && textField.current.focus();\n      },\n\n      blur(): void {\n        textField.current && textField.current.blur();\n      },\n\n      select(): void {\n        textField.current && textField.current.select();\n      },\n\n      setSelectionStart(value: number): void {\n        textField.current && textField.current.setSelectionStart(value);\n      },\n\n      setSelectionEnd(value: number): void {\n        textField.current && textField.current.setSelectionEnd(value);\n      },\n\n      setSelectionRange(start: number, end: number): void {\n        textField.current && textField.current.setSelectionRange(start, end);\n      },\n    }),\n    [internalState, textField],\n  );\n};\n\nexport const DEFAULT_MASK_CHAR = '_';\n\nexport const MaskedTextField: React.FunctionComponent<IMaskedTextFieldProps> = React.forwardRef<\n  HTMLDivElement,\n  IMaskedTextFieldProps\n>((props, ref) => {\n  const textField = React.useRef<IMaskedTextField>(null);\n\n  const {\n    componentRef,\n    onFocus,\n    onBlur,\n    onMouseDown,\n    onMouseUp,\n    onChange,\n    onPaste,\n    onKeyDown,\n    mask,\n    maskChar = DEFAULT_MASK_CHAR,\n    maskFormat = DEFAULT_MASK_FORMAT_CHARS,\n    value,\n  } = props;\n\n  const internalState = useConst<IMaskedTextFieldInternalState>(() => ({\n    maskCharData: parseMask(mask, maskFormat),\n    isFocused: false,\n    moveCursorOnMouseUp: false,\n    changeSelectionData: null,\n  }));\n\n  /** The index into the rendered value of the first unfilled format character */\n  const [maskCursorPosition, setMaskCursorPosition] = React.useState<number | undefined>();\n\n  /**\n   * The mask string formatted with the input value.\n   * This is what is displayed inside the TextField\n   * @example\n   *  `Phone Number: 12_ - 4___`\n   */\n  const [displayValue, setDisplayValue] = React.useState<string>(() =>\n    getMaskDisplay(mask, internalState.maskCharData, maskChar),\n  );\n\n  const setValue = React.useCallback(\n    (newValue: string): void => {\n      let valueIndex = 0;\n      let charDataIndex = 0;\n\n      while (valueIndex < newValue.length && charDataIndex < internalState.maskCharData.length) {\n        // Test if the next character in the new value fits the next format character\n        const testVal = newValue[valueIndex];\n        if (internalState.maskCharData[charDataIndex].format.test(testVal)) {\n          internalState.maskCharData[charDataIndex].value = testVal;\n          charDataIndex++;\n        }\n        valueIndex++;\n      }\n    },\n    [internalState],\n  );\n\n  const handleFocus = React.useCallback(\n    (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      onFocus?.(ev);\n      internalState.isFocused = true;\n\n      // Move the cursor position to the leftmost unfilled position\n      for (let i = 0; i < internalState.maskCharData.length; i++) {\n        if (!internalState.maskCharData[i].value) {\n          setMaskCursorPosition(internalState.maskCharData[i].displayIndex);\n          break;\n        }\n      }\n    },\n    [internalState, onFocus],\n  );\n\n  const handleBlur = React.useCallback(\n    (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      onBlur?.(ev);\n      internalState.isFocused = false;\n      internalState.moveCursorOnMouseUp = true;\n    },\n    [internalState, onBlur],\n  );\n\n  const handleMouseDown = React.useCallback(\n    (ev: React.MouseEvent<HTMLInputElement>) => {\n      onMouseDown?.(ev);\n      if (!internalState.isFocused) {\n        internalState.moveCursorOnMouseUp = true;\n      }\n    },\n    [internalState, onMouseDown],\n  );\n\n  const handleMouseUp = React.useCallback(\n    (ev: React.MouseEvent<HTMLInputElement>) => {\n      onMouseUp?.(ev);\n      // Move the cursor on mouseUp after focusing the textField\n      if (internalState.moveCursorOnMouseUp) {\n        internalState.moveCursorOnMouseUp = false;\n        // Move the cursor position to the rightmost unfilled position\n        for (let i = 0; i < internalState.maskCharData.length; i++) {\n          if (!internalState.maskCharData[i].value) {\n            setMaskCursorPosition(internalState.maskCharData[i].displayIndex);\n            break;\n          }\n        }\n      }\n    },\n    [internalState, onMouseUp],\n  );\n\n  const handleInputChange = React.useCallback(\n    (ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, inputValue: string) => {\n      if (internalState.changeSelectionData === null && textField.current) {\n        internalState.changeSelectionData = {\n          changeType: 'default',\n          selectionStart: textField.current.selectionStart !== null ? textField.current.selectionStart : -1,\n          selectionEnd: textField.current.selectionEnd !== null ? textField.current.selectionEnd : -1,\n        };\n      }\n      if (!internalState.changeSelectionData) {\n        return;\n      }\n\n      // The initial value of cursorPos does not matter\n      let cursorPos = 0;\n      const { changeType, selectionStart, selectionEnd } = internalState.changeSelectionData;\n\n      if (changeType === 'textPasted') {\n        const charsSelected = selectionEnd - selectionStart;\n        const charCount = inputValue.length + charsSelected - displayValue.length;\n        const startPos = selectionStart;\n        // eslint-disable-next-line deprecation/deprecation\n        const pastedString = inputValue.substr(startPos, charCount);\n\n        // Clear any selected characters\n        if (charsSelected) {\n          internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charsSelected);\n        }\n        cursorPos = insertString(internalState.maskCharData, startPos, pastedString);\n      } else if (changeType === 'delete' || changeType === 'backspace') {\n        // isDel is true If the characters are removed LTR, otherwise RTL\n        const isDel = changeType === 'delete';\n        const charCount = selectionEnd - selectionStart;\n\n        if (charCount) {\n          // charCount is > 0 if range was deleted\n          internalState.maskCharData = clearRange(internalState.maskCharData, selectionStart, charCount);\n          cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);\n        } else {\n          // If charCount === 0, there was no selection and a single character was deleted\n          if (isDel) {\n            internalState.maskCharData = clearNext(internalState.maskCharData, selectionStart);\n            cursorPos = getRightFormatIndex(internalState.maskCharData, selectionStart);\n          } else {\n            internalState.maskCharData = clearPrev(internalState.maskCharData, selectionStart);\n            cursorPos = getLeftFormatIndex(internalState.maskCharData, selectionStart);\n          }\n        }\n      } else if (inputValue.length > displayValue.length) {\n        // This case is if the user added characters\n        const charCount = inputValue.length - displayValue.length;\n        const startPos = selectionEnd - charCount;\n        // eslint-disable-next-line deprecation/deprecation\n        const enteredString = inputValue.substr(startPos, charCount);\n\n        cursorPos = insertString(internalState.maskCharData, startPos, enteredString);\n      } else if (inputValue.length <= displayValue.length) {\n        /**\n         * This case is reached only if the user has selected a block of 1 or more\n         * characters and input a character replacing the characters they've selected.\n         */\n        const charCount = 1;\n        const selectCount = displayValue.length + charCount - inputValue.length;\n        const startPos = selectionEnd - charCount;\n        // eslint-disable-next-line deprecation/deprecation\n        const enteredString = inputValue.substr(startPos, charCount);\n\n        // Clear the selected range\n        internalState.maskCharData = clearRange(internalState.maskCharData, startPos, selectCount);\n        // Insert the printed character\n        cursorPos = insertString(internalState.maskCharData, startPos, enteredString);\n      }\n\n      internalState.changeSelectionData = null;\n\n      const newValue = getMaskDisplay(mask, internalState.maskCharData, maskChar);\n\n      setDisplayValue(newValue);\n      setMaskCursorPosition(cursorPos);\n\n      // Perform onChange after input has been processed. Return value is expected to be the displayed text\n      onChange?.(ev, newValue);\n    },\n    [displayValue.length, internalState, mask, maskChar, onChange],\n  );\n\n  const handleKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLInputElement>) => {\n      onKeyDown?.(ev);\n\n      internalState.changeSelectionData = null;\n      if (textField.current && textField.current.value) {\n        // eslint-disable-next-line deprecation/deprecation\n        const { keyCode, ctrlKey, metaKey } = ev;\n\n        // Ignore ctrl and meta keydown\n        if (ctrlKey || metaKey) {\n          return;\n        }\n\n        // On backspace or delete, store the selection and the keyCode\n        if (keyCode === KeyCodes.backspace || keyCode === KeyCodes.del) {\n          const selectionStart = (ev.target as HTMLInputElement).selectionStart;\n          const selectionEnd = (ev.target as HTMLInputElement).selectionEnd;\n\n          // Check if backspace or delete press is valid.\n          if (\n            !(keyCode === KeyCodes.backspace && selectionEnd && selectionEnd > 0) &&\n            !(keyCode === KeyCodes.del && selectionStart !== null && selectionStart < textField.current.value.length)\n          ) {\n            return;\n          }\n\n          internalState.changeSelectionData = {\n            changeType: keyCode === KeyCodes.backspace ? 'backspace' : 'delete',\n            selectionStart: selectionStart !== null ? selectionStart : -1,\n            selectionEnd: selectionEnd !== null ? selectionEnd : -1,\n          };\n        }\n      }\n    },\n    [internalState, onKeyDown],\n  );\n\n  const handlePaste = React.useCallback(\n    (ev: React.ClipboardEvent<HTMLInputElement>) => {\n      onPaste?.(ev);\n\n      const selectionStart = (ev.target as HTMLInputElement).selectionStart;\n      const selectionEnd = (ev.target as HTMLInputElement).selectionEnd;\n      // Store the paste selection range\n      internalState.changeSelectionData = {\n        changeType: 'textPasted',\n        selectionStart: selectionStart !== null ? selectionStart : -1,\n        selectionEnd: selectionEnd !== null ? selectionEnd : -1,\n      };\n    },\n    [internalState, onPaste],\n  );\n\n  // Updates the display value if mask or value props change.\n  React.useEffect(() => {\n    internalState.maskCharData = parseMask(mask, maskFormat);\n    value !== undefined && setValue(value);\n    setDisplayValue(getMaskDisplay(mask, internalState.maskCharData, maskChar));\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- Should only update when mask or value changes.\n  }, [mask, value]);\n\n  // Run before browser paint to avoid flickering from selection reset.\n  useIsomorphicLayoutEffect(() => {\n    // Move the cursor to position before paint.\n    if (maskCursorPosition !== undefined && textField.current) {\n      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);\n    }\n  }, [maskCursorPosition]);\n\n  // Run after browser paint.\n  React.useEffect(() => {\n    // Move the cursor to the start of the mask format after values update.\n    if (internalState.isFocused && maskCursorPosition !== undefined && textField.current) {\n      textField.current.setSelectionRange(maskCursorPosition, maskCursorPosition);\n    }\n  });\n\n  useComponentRef(componentRef, internalState, textField);\n\n  return (\n    <TextField\n      {...props}\n      elementRef={ref}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onChange={handleInputChange}\n      onKeyDown={handleKeyDown}\n      onPaste={handlePaste}\n      value={displayValue || ''}\n      componentRef={textField}\n    />\n  );\n});\nMaskedTextField.displayName = COMPONENT_NAME;\n", "export interface IMaskValue {\n  value?: string;\n  /**\n   * This index refers to the index in the displayMask rather than the inputMask.\n   * This means that any escaped characters do not count toward this index.\n   */\n  displayIndex: number;\n  format: RegExp;\n}\n\nexport const DEFAULT_MASK_FORMAT_CHARS: { [key: string]: RegExp } = {\n  '9': /[0-9]/,\n  a: /[a-zA-Z]/,\n  '*': /[a-zA-Z0-9]/,\n};\n\n/**\n * Takes in the mask string and the formatCharacters and returns an array of MaskValues\n * Example:\n * mask = 'Phone Number: (999) - 9999'\n * return = [\n *    { value: undefined, displayIndex: 16, format: /[0-9]/ },\n *    { value: undefined, displayIndex: 17, format: /[0-9]/ },\n *    { value: undefined, displayIndex: 18, format: /[0-9]/ },\n *    { value: undefined, displayIndex: 22, format: /[0-9]/ },\n * ]\n *\n * @param mask The string use to define the format of the displayed maskedValue.\n * @param formatChars An object defining how certain characters in the mask should accept input.\n */\nexport function parseMask(\n  mask: string | undefined,\n  formatChars: { [key: string]: RegExp } = DEFAULT_MASK_FORMAT_CHARS,\n): IMaskValue[] {\n  if (!mask) {\n    return [];\n  }\n\n  const maskCharData: IMaskValue[] = [];\n  // Count the escape characters in the mask string.\n  let escapedChars = 0;\n  for (let i = 0; i + escapedChars < mask.length; i++) {\n    const maskChar = mask.charAt(i + escapedChars);\n    if (maskChar === '\\\\') {\n      escapedChars++;\n    } else {\n      // Check if the maskChar is a format character.\n      const maskFormat = formatChars[maskChar];\n      if (maskFormat) {\n        maskCharData.push({\n          /**\n           * Do not add escapedChars to the displayIndex.\n           * The index refers to a position in the mask's displayValue.\n           * Since the backslashes don't appear in the displayValue,\n           * we do not add them to the charData displayIndex.\n           */\n          displayIndex: i,\n          format: maskFormat,\n        });\n      }\n    }\n  }\n\n  return maskCharData;\n}\n\n/**\n * Takes in the mask string, an array of MaskValues, and the maskCharacter\n * returns the mask string formatted with the input values and maskCharacter.\n * If the maskChar is undefined, the maskDisplay is truncated to the last filled format character.\n * Example:\n * mask = 'Phone Number: (999) 999 - 9999'\n * maskCharData = '12345'\n * maskChar = '_'\n * return = 'Phone Number: (123) 45_ - ___'\n *\n * Example:\n * mask = 'Phone Number: (999) 999 - 9999'\n * value = '12345'\n * maskChar = undefined\n * return = 'Phone Number: (123) 45'\n *\n * @param mask The string use to define the format of the displayed maskedValue.\n * @param maskCharData The input values to insert into the mask string for displaying.\n * @param maskChar? A character to display in place of unfilled mask format characters.\n */\nexport function getMaskDisplay(mask: string | undefined, maskCharData: IMaskValue[], maskChar?: string): string {\n  let maskDisplay = mask;\n\n  if (!maskDisplay) {\n    return '';\n  }\n\n  // Remove all backslashes\n  maskDisplay = maskDisplay.replace(/\\\\/g, '');\n\n  // lastDisplayIndex is is used to truncate the string if necessary.\n  let lastDisplayIndex = 0;\n  if (maskCharData.length > 0) {\n    lastDisplayIndex = maskCharData[0].displayIndex - 1;\n  }\n\n  /**\n   * For each input value, replace the character in the maskDisplay with the value.\n   * If there is no value set for the format character, use the maskChar.\n   */\n  for (const charData of maskCharData) {\n    let nextChar = ' ';\n    if (charData.value) {\n      nextChar = charData.value;\n      if (charData.displayIndex > lastDisplayIndex) {\n        lastDisplayIndex = charData.displayIndex;\n      }\n    } else {\n      if (maskChar) {\n        nextChar = maskChar;\n      }\n    }\n\n    // Insert the character into the maskdisplay at its corresponding index\n    maskDisplay = maskDisplay.slice(0, charData.displayIndex) + nextChar + maskDisplay.slice(charData.displayIndex + 1);\n  }\n\n  // Cut off all mask characters after the last filled format value\n  if (!maskChar) {\n    maskDisplay = maskDisplay.slice(0, lastDisplayIndex + 1);\n  }\n\n  return maskDisplay;\n}\n\n/**\n * Get the next format index right of or at a specified index.\n * If no index exists, returns the rightmost index.\n * @param maskCharData\n * @param index\n */\nexport function getRightFormatIndex(maskCharData: IMaskValue[], index: number): number {\n  for (let i = 0; i < maskCharData.length; i++) {\n    if (maskCharData[i].displayIndex >= index) {\n      return maskCharData[i].displayIndex;\n    }\n  }\n  return maskCharData[maskCharData.length - 1].displayIndex;\n}\n\n/**\n * Get the next format index left of a specified index.\n * If no index exists, returns the leftmost index.\n * @param maskCharData\n * @param index\n */\nexport function getLeftFormatIndex(maskCharData: IMaskValue[], index: number): number {\n  for (let i = maskCharData.length - 1; i >= 0; i--) {\n    if (maskCharData[i].displayIndex < index) {\n      return maskCharData[i].displayIndex;\n    }\n  }\n  return maskCharData[0].displayIndex;\n}\n\n/**\n * Deletes all values in maskCharData with a displayIndex that falls inside the specified range.\n * maskCharData is modified inline and also returned.\n * @param maskCharData\n * @param selectionStart\n * @param selectionCount\n */\nexport function clearRange(maskCharData: IMaskValue[], selectionStart: number, selectionCount: number): IMaskValue[] {\n  for (let i = 0; i < maskCharData.length; i++) {\n    if (maskCharData[i].displayIndex >= selectionStart) {\n      if (maskCharData[i].displayIndex >= selectionStart + selectionCount) {\n        break;\n      }\n      maskCharData[i].value = undefined;\n    }\n  }\n  return maskCharData;\n}\n\n/**\n * Deletes the input character at or after a specified index and returns the new array of charData\n * maskCharData is modified inline and also returned.\n * @param maskCharData\n * @param selectionStart\n */\nexport function clearNext(maskCharData: IMaskValue[], selectionStart: number): IMaskValue[] {\n  for (let i = 0; i < maskCharData.length; i++) {\n    if (maskCharData[i].displayIndex >= selectionStart) {\n      maskCharData[i].value = undefined;\n      break;\n    }\n  }\n  return maskCharData;\n}\n\n/**\n * Deletes the input character before a specified index and returns the new array of charData\n * maskCharData is modified inline and also returned.\n * @param maskCharData\n * @param selectionStart\n */\nexport function clearPrev(maskCharData: IMaskValue[], selectionStart: number): IMaskValue[] {\n  for (let i = maskCharData.length - 1; i >= 0; i--) {\n    if (maskCharData[i].displayIndex < selectionStart) {\n      maskCharData[i].value = undefined;\n      break;\n    }\n  }\n  return maskCharData;\n}\n\n/**\n * Deletes all values in maskCharData with a displayIndex that falls inside the specified range.\n * Modifies the maskCharData inplace with the passed string and returns the display index of the\n * next format character after the inserted string.\n * @param maskCharData\n * @param selectionStart\n * @param selectionCount\n * @return The displayIndex of the next format character\n */\nexport function insertString(maskCharData: IMaskValue[], selectionStart: number, newString: string): number {\n  let stringIndex = 0;\n  let nextIndex = 0;\n  let isStringInserted = false;\n\n  // Iterate through _maskCharData finding values with a displayIndex after the specified range start\n  for (let i = 0; i < maskCharData.length && stringIndex < newString.length; i++) {\n    if (maskCharData[i].displayIndex >= selectionStart) {\n      isStringInserted = true;\n      nextIndex = maskCharData[i].displayIndex;\n      // Find the next character in the newString that matches the format\n      while (stringIndex < newString.length) {\n        // If the character matches the format regexp, set the maskCharData to the new character\n        if (maskCharData[i].format.test(newString.charAt(stringIndex))) {\n          maskCharData[i].value = newString.charAt(stringIndex++);\n          // Set the nextIndex to the display index of the next mask format character.\n          if (i + 1 < maskCharData.length) {\n            nextIndex = maskCharData[i + 1].displayIndex;\n          } else {\n            nextIndex++;\n          }\n          break;\n        }\n        stringIndex++;\n      }\n    }\n  }\n\n  return isStringInserted ? nextIndex : selectionStart;\n}\n"],
  "mappings": "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",
  "names": ["React", "LabelBase", "classNames", "React", "IconType", "React", "ImageFit", "ImageCoverStyle", "ImageLoadState", "React", "React", "React", "React", "React", "React", "React", "React", "React", "_i", "React", "React", "React", "React", "React", "React", "React", "React", "React", "React", "getClassNames", "classNames", "getStyles", "classNames", "window", "getStyles", "React", "getStyles", "getClassNames", "IconBase", "classNames", "getStyles", "React", "getClassNames", "TextFieldBase", "props", "_a", "classNames", "getStyles", "classNames", "getStyles", "React", "COMPONENT_NAME", "_a"]
}
